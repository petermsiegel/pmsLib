Function:  ∆OPTS
ns ← declaration_specs ∇ call_specs
Description:
   "Based on a set of options in declarations (declaration_specs),
    decode a set of 0 or more function call arguments and options(call_specs),
    each a separate scalar (with an option of splitting a string right argument
    into tokens on blanks).
    Allow <-option arg> pairs where arg can be a scalar of any type, as well as
    flags (value 1 if present, else 0) and arbitrary default values."
    Note: Unless Unix conventions, we don't require a distinction between
    single-letter options and multi-letter. All hyphen prefixes are removed before
    disambiguation. This -s and -string can be the same option or distinct, e.g.
    if string is declared as 'st(ring)' or even 'string()' to distinguish from -s.
Returns namespace ns with
    <opt>:    value of each named option ns.opt specified in declaration format (below).
    ARGS:     ordered list of those arguments not associated with options.

DECLARATION SPECIFICATIONS: declaration_specs  (defining user options and variants)
  DECLARATIONS (may begin with optional single hyphen, ignored)
    name      Option is num 1 if present, else default 0.
    !name     Option is default num 1 if present, but 0 if -noname is specified.
    name=val  Option is <newval> if present, else character <val>
              newval comes from -name=newval OR -name= <newval>.
              In the latter case, <newval> can have any type.
    name==    Option default is in next word. (or name::)
    name=     Option is newval (with no default specified;
              -name must be specified in the call  or an error occurs.
              E.g. call format:   '-name=0'  OR   '-name' ⎕IO
  VARIANT OPTIONS (All begin with ⍠, followed by 1 or more capital letters)
    ⍠A[LL] (default)  |  ⍠L[EFT]
      ⍠ALL    Options may appear before and after arguments.
      ⍠LEFT   Call options appear only to the left of arguments, ending at the
              first item not associated with an option. Options to the right are treated as simple arguments.
              See also Call Option '--'.
    ⍠T[EXT]  Right arg (⍵) must be a simple string. It will be split into args and options on blanks.
              If ⍠TEXT is specified and ⍵ is not a simple string, an error will be signalled.
    (default) By default, ⍵ is a list, i.e. a vector of objects, with char vectors starting with
              -ccc for options (where ccc is 1 or more characters), as defined in Call Specifications Below.
    ⍠STRICT   (No abbrev). If specified, will not be flexible on the use of flags vs regular options.
               E.g. a declared flag won't be able to be assigned a value EXPLICITLY--
                   It will be 1 if present and 0 otherwise.

  NOTE: Wherever = is specified above, : may be used instead.
     name=val <==>  name:value       Define option and default
     name=    <==>  name:            Define option requiring call (run-time) value
     name==   <==>  name::

CALL SPECIFICATIONS:  call_specs  (Call format of arguments and options)
   STANDARD OPTIONS:
    -name          If decl is 'name' [item is a flag], sets name←1, else 0.
                   If decl is 'name=' [item a full option], sets name to next item in list
                       (which must be present).
                   If decl is 'name=newval' [item a full option], sets name to next item.
    -name=newval   Sets name=newval
    -name=         If decl is 'name', name←1.
                   If decl is 'name=val', sets name←val.
                   If decl is 'name=', sets name to next item in list (required).
   SPECIAL OPTION:
    --             Signifies with options...
                   E.g. ⍵ might be:   '-name' 'John Smith' '-addr' '45 Maple Ln' -- '-tel' '555-1212'
                   ∆OPTS, seeing '--', treats '-tel' and '555-1212' as arguments, not options.
  NOTE: The number of hyphens is not significant; these are all the same:
           -name --name ---name.
  You can distinguish Unix-style single-letter options like -s from multi-letter options like
  --string by declaring differently:
         's'  'string()'.
  You can "call" the first as -s, --s, etc; and the latter, as
         -string, --string, etc., but NOT as -s, --s, --str, etc.
  NOTE: If the declaration value is a number (whether explicit or by default),
        the call value will be converted to a number if possible.
            n←'test=5' ∆OPTS '-test=10' ==>   n.test≡10
        This uses ⎕VFI rules, so odd results can apply if not anticipated:
            n←'test=5' ∆OPTS '-test=10 5x 22'  ==>  n.test ≡ 10 22
            Compare:  (⎕VFI '10 5x 22') ≡  (1 0 1) (10 0 22)
  NOTE: Wherever = is specified above, a colon (:) may be used instead.
       '-name=newval' <==> '-name:newval'
