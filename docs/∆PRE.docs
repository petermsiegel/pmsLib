  ⍝H ∆PRE    20190711
  ⍝H - Preprocesses contents of codeFileName (a 2∘⎕FIX-format file) and fixes in
  ⍝H   the workspace (via 2 ⎕FIX ppData, where ppData is the processed version of the contents).
  ⍝H - Returns: (shyly) the list of objects created (possibly none).
  ⍝H
  ⍝H names ← [⍺:opts preamble1 ... preambleN] ∆PRE ⍵:codeFileName
  ⍝H
  ⍝H ---------------------------------------------------------
  ⍝H   ⍺
  ⍝H  (1↑⍺):opts    Contains one or more of the following letters:
  ⍝H                V; D; E; Q; (M | S);(C | c);  H
  ⍝H   Debugging:   Verbose, Debug, Edit; Quiet
  ⍝H   [DQ lines]:  Multi-line | Single-line;
  ⍝H   Compression: Compress (comments+blank lines), compress (blank lines)
  ⍝H   Help info:   Help
  ⍝H ---------------------------------------------------------
  ⍝H
  ⍝H Verbosity
  ⍝H    'V' (Verbose)The default
  ⍝H                 Preprocessor directives and APL lines with macro replacements
  ⍝H                 are shown in the ⎕FIXed output code as comments
  ⍝H Debugging output
  ⍝H    'D' (Debug)
  ⍝H                 Details on the flow of execution are showed in the stdout (⎕←...)
  ⍝H                 For function ⍵, the function __⍵__, which shows all the details, is preserved.
  ⍝H                 See Debugging Flags below.
  ⍝H     D sets 'V' as well.
  ⍝H
  ⍝H     E  (Edit)   ⎕EDits the intermediate preprocessor file(*) when done...
  ⍝H                 (Sets 'D'; Debug mode)
  ⍝H                 (*) The intermed. preproc file is a text file which is ⎕FIXed to create the
  ⍝H                 executables.
  ⍝H                 Unlike the latter, the intermed. file will be viewable even if the
  ⍝H                 ⎕FIXed executable can not be created (e.g. because of errors).
  ⍝H    'Q' or ''    None of 'DV' above.
  ⍝H                 Put no preprocessor comments in output and no details on the console
  ⍝H                 Q will force ∆PRE to ignore #.__DEBUG__.
  ⍝H
  ⍝H Are multi-line double-quoted strings treated as multiple strings (M)
  ⍝H or a single strings with newlines?
  ⍝H        Example Input
  ⍝H                str ← "line1
  ⍝H                       line2
  ⍝H                       line three"
  ⍝H    'M' (Mult)   The default
  ⍝H                 A multiline DQ string ends up as multiple char vectors
  ⍝H        Output:  str←'line1' 'line2' 'line3'
  ⍝H    'S' (Single) A multiline DQ string ends up as a single string with embedded newlines
  ⍝H        Output:  str←('line1',(⎕UCS 13),'line2',(⎕UCS 13),'line three')
  ⍝H
  ⍝H    'C'          (Compress) Remove blank lines and comment lines (most useful w/ Q)!
  ⍝H    'c'          (small compress) Remove blank lines only!
  ⍝H Help Information
  ⍝H    'H'          Show this HELP information
  ⍝H    '?' | 'h'    Same as 'H'
  ⍝H
  ⍝H Debugging Flags
  ⍝H    If __DEBUG__ is defined in the namespace from which ∆PRE was called,
  ⍝H           then __DEBUG__ mode is set, even if the 'D' flag is not specified.
  ⍝H           unless 'Q' (quiet) mode is set explicitly.
  ⍝H           debugmode:  (__DEBUG__∨D)∧~Q
  ⍝H    If __DEBUG__ mode is set,
  ⍝H           internal macro "variable" __DEBUG__ is defined (DEF'd) as 1, as if:
  ⍝H                 ::VAL __DEBUG__ ← (__DEBUG__∨option_D)∧~option_Q   ⍝ Pseudocode...
  ⍝H           In addition, Verbose mode is set.
  ⍝H    Otherwise,
  ⍝H           Internal flag variable __DEBUG__ is defined as 0.
  ⍝H           Verbose mode then depends on the 'V' flag (default is 1).
  ⍝H
  ⍝H    Use ::IF __DEBUG__ etc. to change preprocessor behavior based on debug status.
  ⍝H
  ⍝H
  ⍝H ---------------------------------------------------------
  ⍝H   ⍺
  ⍝H  (1↓⍺): preamble1 ... preambleN
  ⍝H ---------------------------------------------------------
  ⍝H    Zero or more lines of a preamble to be included at the start,
  ⍝H    e.g. ⍺ might include definitions to "import"
  ⍝H         'V' '::DEF PHASE1' '::DEF pi ← 3.13'
  ⍝H          ↑   ↑__preamble1   preamble2
  ⍝H          ↑__ option(s)
  ⍝H
  ⍝H ---------------------------------------------------------------------------------
  ⍝H  ⍵
  ⍝H  ⍵:codeFN   The filename of the function, operator, namespace, or set of objects
  ⍝H             ⎕NULL: Prompt for lines from the user, creating pseudo-function
  ⍝H                 __PROMPT__
  ⍝H ---------------------------------------------------------------------------------
  ⍝H
  ⍝H    The simple name, name.ext, or full filename
  ⍝H    of the function or cluster of objects compatible with (2 ⎕FIX ⍵),
  ⍝H    whose source will be loaded from:
  ⍝H      [a] if ⍵ has no filetype/extension,
  ⍝H             ⍵.dyapp,
  ⍝H          or (if not found in ⍵.dyapp),
  ⍝H             ⍵.dyalog
  ⍝H      [b] else
  ⍝H             ⍵ by itself.
  ⍝H    THese directories are searched:
  ⍝H           .  ..  followed by dirs named in env vars FSPATH and WSPATH (: separates dirs)
  ⍝H ---------
  ⍝H Returns
  ⍝H ---------
  ⍝H Returns (shyly) the names of the 0 or more objects fixed via (2 ⎕FIX code).
  ⍝H
  ⍝H ---------------------------------------------------------------------------------
  ⍝H Features:
  ⍝H ---------------------------------------------------------------------------------
  ⍝H   ∘ Implicit macros
  ⍝H     ∘ HEXADECIMALS: Hex number converted to decimal
  ⍝H             0FACX /[\d][\dA-F]*[xX]/
  ⍝H     ∘ BIG INTEGERS: Big integers (of any length) /¯?\d+[iI]/ are converted to
  ⍝H             quoted numeric strings for use with Big Integer routines.
  ⍝H             04441433566767657I →  '04441433566767657'
  ⍝H       Big Integers may have non-negative exponents, but no decimals.
  ⍝H       The exponents simply add trailing zeros. E.g. 123 with 100 trailing zeros:
  ⍝H            123E100I  ==>   12300000[etc.]00000
  ⍝H     ∘ PROGRESSIONS: num1 [num2] .. num3    OR   'c' 'd' .. 'e'  [where c,d,e are chars]
  ⍝H                                            OR   'cd' .. e
  ⍝H             Progressions use either the ellipsis char (…) or 2 or more dots (..).
  ⍝H         With Numbers
  ⍝H             Creates a real-number progression from num1 to num3
  ⍝H             with delta (num2-num1), defaulting to 1 or ¯1.
  ⍝H             With constants  (10 0.5 .. 15), the progression is calculated at
  ⍝H             preprocessor time; with variables, a DFN is inserted to calculate at run time.
  ⍝H             Example:  :FOR i :in 1 1.5 .. 100  ==> :FOR i :in 1 1.5 2 2.5 [etc.] 99.5 100
  ⍝H             Example:  :FOR i :in a b   .. 100  ==> :FOR i :in a b {progressn dfn} c
  ⍝H         With Characters
  ⍝H             Creates a progression from char1 to char3 (with gaps determined by char2-char1)
  ⍝H                'a'..'h'         ==> 'abcdefgh'
  ⍝H                'a' 'c' .. 'h'   ==> 'aceg'
  ⍝H                'ac'..'h'        ==> 'aceg'
  ⍝H                'h'..'a'         ==> 'hgfedcba'
  ⍝H       Note: Progressions with constants that are too large (typically 500) are
  ⍝H             not expanded, but calculated at run time. This saves on ⎕FIX-time storage and
  ⍝H             perhaps editing awkwardness.
  ⍝H             Example:  :FOR i :in 1..10000  ==> :FOR i :in 1 {progressn dfn}10000
  ⍝H             See __MAX_PROGRESSION__ below to change this behavior.
  ⍝H     ∘ MAPS: word1 word2 ... wordN → anything
  ⍝H             where word1 is an APL-style name or an APL number;
  ⍝H             such that numbers are left as is, but names are quoted:
  ⍝H               func (name → 'John Smith', age → 25, code 1 → (2 3⍴⍳6)) ==>
  ⍝H               func (('name')'John Smith'),('age')25,('code' 1)(2 3⍴⍳6))
  ⍝H     ∘ ATOM:    `word1 word2 ... wordN
  ⍝H             as for MAPS, as in:
  ⍝H                `red orange  02FFFEX green ==>
  ⍝H                ('red' 'orange' 196606 'green')      ⍝ Hex number converted to decimal
  ⍝H
  ⍝H   ∘ explicit macros for text replacement
  ⍝H       See ::DEF, ::CDEF
  ⍝H   ∘ continuation lines end with .. (either the ellipsis char. or 2 or more dots),
  ⍝H     possibly with a preceding comment. In the output file, the lines are
  ⍝H     connected with the set of comments on the continuation lines on the last line
  ⍝H     or (if large) the following (otherwise blank) line
  ⍝H       vec←  1  2  3  4   5 ...   ⍝ Line 1
  ⍝H            ¯1 ¯2 ¯3 ¯4  ¯5 ..    ⍝ Line 2
  ⍝H            60 70 80 90 100       ⍝ Last line
  ⍝H     ==>
  ⍝H       vec← 1 2 3 4 5  ¯1 ¯2 ¯3 ¯4 ¯5 60 70 80 90 100
  ⍝H       ⍝ Line 1 ⍝ Line 2 ⍝ Last line
  ⍝H
  ⍝H   Double-Quoted (Multi-line Capable) Strings
  ⍝H   ------------------------------------------
  ⍝H   ∘ Double quoted strings under options M (default) or S.
  ⍝H     These may appear on one or more lines. By default, leading blanks on
  ⍝H     continuation lines are ignored, allowing follow-on lines to easily line up
  ⍝H     under the first line. (See the DQ Raw suffix below).
  ⍝H     A string may be forced to M or S mode by an M or S suffix, ignoring options M or S.
  ⍝H     Example:
  ⍝H       str←"This is line 1.     strM←"This is line 1.      strS←"This is line 1.
  ⍝H            This is line 2.           This is line 2.            This is line 2.
  ⍝H            This is line 3."          This is line 3."M          This is line 3."S
  ⍝H   ==>
  ⍝H   option 'M':
  ⍝H       str← 'This is line 1.' 'This is line 2.' 'This is line 3.'
  ⍝H   option 'S':
  ⍝H       str← ('This is line 1.',(⎕UCS 13),'This is line 2.',(⎕UCS 13),'This is line 3.')
  ⍝H   Regardless of option 'M' vs 'S':
  ⍝H       strM←'This is line 1.' 'This is line 2.' 'This is line 3.'
  ⍝H       strS←('This is line 1.',(⎕UCS 13),'This is line 2.',(⎕UCS 13),'This is line 3.')
  ⍝H
  ⍝H   ∘ Double-Quoted Raw Suffix:
  ⍝H     Double-quoted strings followed (w/o spaces) by the R (raw) suffix will NOT have
  ⍝H     leading spaces on continuation lines removed.
  ⍝H     Options M and S (above) are both supported.
  ⍝H     "This is a
  ⍝H      raw format
  ⍝H   double string."R
  ⍝H   ==>  (option 'M')
  ⍝H     'This is a' '      raw format' 'double string.'
  ⍝H
  ⍝H    Triple-double quotes.  """ ... """
  ⍝H      Triple-double quoted expressions may appear on one or more lines.
  ⍝H      They are not treated as strings, but as comments, resolving to a single comment.
  ⍝H          1 + """This is a triple-quote that
  ⍝H                 is treated as a silly comment""" 4
  ⍝H      ==>
  ⍝H          1 +  4
  ⍝H
  ⍝H    Directives
  ⍝H    ----------
  ⍝H       (Note: currently comments are removed from preprocessor directives
  ⍝H        before processing.
  ⍝H       ::IF      cond         If cond is an undefined name, returns false, as if ::IF 0
  ⍝H       ::IFDEF   name         If name is defined, returns true even if name has value 0
  ⍝H       ::IFNDEF  name
  ⍝H       ::ELSEIF  cond
  ⍝H       ::ELIF                 Alias for ::ELSEIF
  ⍝H       ::ELSE
  ⍝H       ::END                  ::ENDIF, ::ENDIFDEF; allows ::END followed by ANY text
  ⍝H       ::DEF     name ← [VAL] VAL may be an APL code sequence, including the null string
  ⍝H                              If parens are needed, use them.
  ⍝H                              If you want to ignore lines by prefixing with comments,
  ⍝H                              use EVAL. Comments are IGNORED on directive lines, unless quoted.
  ⍝H       ::DEF     name ←       Sets name to a nullstring, not its quoted value.
  ⍝H       ::DEF     name         Same as ::DEF name ← 'name'
  ⍝H       ::DEFINE  name ...     Alias for ::DEF ...
  ⍝H       ::DEFQ    name ...     Like ::DEF except quoted evaluated string
  ⍝H       ::CDEF    name ...     Like ::DEF, except executed only if name is undefined
  ⍝H       ::[E]VAL  name ...     Same as ::DEF, except name ← ⍎val
  ⍝H       ::[E]VALQ name ...     Same as ::EVAL, except result is quoted.
  ⍝H                 ∘ Note that ::DEF creates a string of code (including comments),
  ⍝H                 and is "TRUE" if it is not-null.  EVAL executes the string to determine
  ⍝H                 its value; it is true if not 0, or an object of length 0.
  ⍝H
  ⍝H       ∘ To create a macro to "null out" code lines (have them ignored),
  ⍝H         you can't use ::DEF, because (visible) comments are ignored for directives.
  ⍝H         Instead, use ::VAL, which allows you to present the comment in quotes,
  ⍝H         which ::VAL will evaluate (i.e. dequote) as an actual comment sequence.
  ⍝H                      ::VAL PHASE1 ← '⍝ IGNORE PHASE1: '
  ⍝H                      PHASE1 b←do_something_with 'PHASE1'
  ⍝H         Treated as:  ⍝ IGNORE PHASE1: b←do_something_with 'PHASE1'
  ⍝H                      ::VAL PHASE2 ← ''   ⍝ Don't ignore PHASE2.
  ⍝H                                          ⍝ Or do ::DEF PHASE2←       ⍝ null "code" assigned
  ⍝H                      PHASE2 b←do_something_with 'PHASE2'
  ⍝H         Treated as:  b←do_something_with 'PHASE2'
  ⍝H
  ⍝H
  ⍝H       ::TR(ANS) code1 code2  Causes <code1> to be translated to <code2> in each
  ⍝H                              line of input as it is processed.
  ⍝H                              codeN is either a number (hex or dec) of at least 2 chars,
  ⍝H                              or a backslash followed by a single letter (e.g. to do space),
  ⍝H                              or a single letter. For a single backslash use \\ or 92.
  ⍝H       ::UNDEF   name         Undefines name, warning if already undefined
  ⍝H
  ⍝H       ::STATIC  name         Defines a name stored in ⍵.ø.∆MY (⎕MY.name),
  ⍝H                              a namespace stored in the calling namespace,
  ⍝H                              where ⍵ is the fun/obj name, right argument to ∆PRE.
  ⍝H                              Also, defines macro:
  ⍝H                                ::DEF name ← ⍵.ø.∆MY.name
  ⍝H                              so that any reference to the (simple) name <name> will
  ⍝H                              refer to the identified STATIC <name>.
  ⍝H                              <name> is erased if this is the first time it appears in a macro.
  ⍝H       ::STATIC name←val      Like ::STATIC above, but also assigns
  ⍝H                                ⍵.ø.∆MY.name ← val
  ⍝H                              val may be a single-line dfn OR an APL expression,
  ⍝H                              as long as it can be evaluated in the calling namespace
  ⍝H                              at ∆PRE preprocessor time, with whatever side effects.
  ⍝H                              If
  ⍝H                                ::STATIC now←⎕TS
  ⍝H                              then now is set at preprocessor time. This is completely
  ⍝H                              different from
  ⍝H                                ::DEF now←⎕TS
  ⍝H                              which replaces 'now" with '⎕TS' wherever it is found in
  ⍝H                              the function code to be evaluated at RUN TIME.
  ⍝H
  ⍝H                Note: Typically a STATIC name may refer to prior STATIC names,
  ⍝H                      but not run-time names in the function, since they haven't
  ⍝H                      been defined yet.
  ⍝H                Note: While STATIC names may remain across ∆PRE calls, a name's
  ⍝H                      value is erased the first time ::STATIC is executed.
  ⍝H                      This allows a name to change classes across ∆PRE calls, but
  ⍝H                      NOT within a ∆PRE sequence. E.g. this leads to an error just as in APL.
  ⍝H                          ::STATIC i1 ← 1 2 3 {⍺←⊢ ⋄ ⎕io←1 ⋄ ⍺⍳⍵} 2
  ⍝H                          ::STATIC i1 ← {⎕io←1 ⋄ ⍺⍳⍵}
  ⍝H                      In the first case, i1 is a value, the RESULT of a call; in the second,
  ⍝H                      it is a function definition.
  ⍝H
  ⍝H       ::INCLUDE [name[.ext] | "dir/file" | 'dir/file']
  ⍝H       ::INCL    name
  ⍝H       ::IMPORT  name1 name2  Set internal name1 from the value of name2 in the calling env.
  ⍝H       ::IMPORT  name1        The value must be used in a context that makes sense.
  ⍝H                              If name2 omitted, it is the same as name1.
  ⍝H                              big←?2 3 4⍴100
  ⍝H                              big2←'?2 3 4⍴100'
  ⍝H                              ::IMPORT big
  ⍝H                              ::IF 3=⍴⍴big   ⍝ Makes sense
  ⍝H                              ⎕←big          ⍝ Will not work!
  ⍝H                              ::IMPORT big2
  ⍝H                              ⎕←big2         ⍝ Will work
  ⍝H __DEBUG__                ⍝ See DEBUG/__DEBUG__ above...
  ⍝H __MAX_EXPAND__←5         ⍝ Maximum times to expand macros (if 0, expansion is turned off!)
  ⍝H                          ⍝ Set via ⎕DEF __MAX_EXPAND__ ← 100
  ⍝H __MAX_PROGRESSION__←500  ⍝ Maximum expansion of constant dot sequences:  5..100 etc.
  ⍝H                          ⍝ Otherwise, does function call (to save space or preserve line size)
  ⍝H __INCLUDE_LIMITS__←5 10  ⍝ Max times a file may be ::INCLUDEd
  ⍝H                          ⍝ First # is min before warning. Second is max before error.
  ⍝H       ----------------
  ⍝H       cond: Is 0 if value of expr is 0, '', or undefined! Else 1.
  ⍝H       ext:  For ::INCLUDE/::INCL, extensions checked first are .dyapp and .dyalog.
  ⍝H             Paths checked are '.', '..', then dirs in env vars FSPATH and WSPATH.
  ⍝H
  ⍝H To add:  ::EXTERN directive:
  ⍝H          ::EXTERN name←value   (sets  ⎕MY.name←value now and ::DEF name←⎕MY.name (once)
