
   DictClass: A fast, ordered, and simple dictionary for general use.
   ∆DICT:     Primary function for creating new dictionaries.
              d←∆DICT ⍬       ⍝ Create a new, empty dictionary with default value ⍬.
   Dict:      A utility that returns the full name of the dictionary class, often #.DictClass
              d←⎕NEW Dict     ⍝ Create a new, empty dictionary with no default values.
   Hashes vector KEYS for efficiency on large dictionaries.
   For HELP information, call 'dict.HELP'.
    
   d←∆DICT item
   d← default1 ∆DICT [item1 | item2 | item3]
      item1: (key1 val1)(key2 val2)...
             items passed as key-value pairs; keys and vals may be of any type...
      item2: dict
             A dict is an existing instance (scalar) of a DictClass object.   
      item3: ⍪keys vals [⊂default2]  
             items are passed as 2 vectors (keys, vals); 
             the default may optionally be appended as a scalar.
      default1: any APL object of any shape. It is NOT enclosed.
             E.g.  5   OR   'John'   OR  (2 3⍴⍳6)  OR  ''   OR  ⍬ 
    
   d←∆DICT [⊂default]
      default2 must either be null: e.g.         ''  OR  ⍬  
              or be enclosed as a scalar: e.g.  5   OR  ⎕NULL OR ⊂,5   OR  (⊂2 3⍴⍳6) OR  (⊂'Mary')
              The default is defined as the disclose of the item, unless it's simple.
              Here:   5   ⎕NULL   ,5   (2 3⍴⍳6)  'Mary'
   d[⊂k1] or d[k1 k2...]
   Return a value for each key specified. Raises an error any key is not in the dictionary, 
   unless a default is specified.
   See also get, get1 
    
   d[⊂k1] ← (⊂v1) OR d[k1 k2...]←v1 v2 ...
   Assign a value to each key specified, new or existing.
    
   keys ← d.keys                     [alias: key]
   Return a list of all the keys used in the dictionary d.
    
   keys ← d.keys[indices]            [alias: key]
   Return a list of keys by numeric indices i1 i2 ...
    
   vals ← d.vals                     [alias: val]
   Returns the list of values  in entry order for  all items; suitable for iteration
        :FOR v :in d.vals ...
    
   vals ← d.vals[indices]            [alias: val]
   Returns a list of item values by numeric indices i1 i2 ...
    
   d.vals[indices]←newvals           [alias: val]
   Sets new values <newvals> for existing items by indices.
    
   nitems ← d.len  
   Return the number of items in the dictionary d.
    
   bool ← [ignore←0] d.del (⊂k1) OR d.del k1 k2 ...
   Remove keys from d.
   Ignore=0: Shyly returns 1 for each key; signals an error of any key is not in the dictionary
   Ignore=1: Shyly returns 1 for each key found, 0 otherwise.
    
   bool ← [ignore←0] d.delbyindex i1 i2 ...               
   bool ← [ignore←0] d.di i1 i2 ...              ⍝ Alias to delbyindex
   Removes items from d by indices i1 i2 .... 
⍝  Ignore=0: Returns 1 for each item removed. Signals an error if any item does not exist.
   Ignore=1: Returns 1 for each item removed; else 0.
    
   bool ← d.defined (⊂k1) OR d.defined k1 k2 ...
   Return 1 for each key that is defined (i.e. is in the dictionary)
    
   d.clear
   Remove all items from the dictionary.
    
   d2 ← d.copy
   Return a shallow copy of the dictionary d, including its defaults
    
   vals ← [default] d.get  k1 k2 ...
   val  ← [default] d.get1 k1
   Return the value for keys in the dictionary, else default. 
   If <default> is omitted and a key is not found, returns the existing default.
    
   (k1 k2 ... d.set v1 v2) ... OR (d.set1 (k1 v1)(k2 v2)...)
   (k1 d.set1 v1) OR (d.set1 k1 v1)
   Set one or more key-value pairs
    
   items ← d.items [k1 k2 ...]
   Return a list of all OR the specified dictionary’s items ((key, value) pairs).  
    
   items ← d.popitems n
   Remove and return the n (n≥0) most-recently entered key-value pairs.
   This is done efficiently, so that the dictionary is not rehashed.
     
   nums ←  [amount ← 1] d.inc k1 k2 ...
   Increments the values of keys by <amount←1>. If undefined and no default is set, 0 is assumed.
   If any referenced key's value is defined and non-numeric, an error is signalled.
    
   nums ← [amount] d.dec k1 k2 ...
   Identical to d.inc (above) except decrements the values by <amount←1>.
    
   d ← d.sort OR d.sorta
   Sort a dictionary in place in ascending order by keys, returning the dictionary
    
   d ← d.sortd
   Sort a dictionary in place in descending order by keys, returning the dictionary 
    
   ix ← d.gradeup
   Returns the indices of the dictionary sorted in ascending order by keys (doesn't reorder the dictionary)
    
   ix ← d.gradedown    
   ix ← d.gradedn           ⍝ Alias for d.gradedown
   Returns the indices of the dictionary sorted in descending order by keys (doesn't reorder the dictionary)
    
   d.default←value
   Sets a default value for missing keys. Also sets d.hasdefault←1
    
   d.hasdefault←[1 | 0]
   Activates (1) or deactivates (0) the current default.
   ∘ Initially, by default:  hasdefault←0  and default←'' 
   ∘ If set to 0, referencing new entries with missing keys cause a VALUE ERROR to be signalled. 
   ∘ Setting hasdefault←0 does not delete any existing default; 
     it is simply inaccessible until hasdefault←1.
    
   d.querydefault
   Returns a vector containing the current default and 1, if defined; else ('' 0)
    
   Dictionaries are ORDERED: they preserve insertion order unless items are sorted or deleted. 
   ∘ Updating an item's key does not affect its order. 
   ∘ New keys are always added at the end, in the last positions in order.
   ∘ To force an  existing item to the last position in order, 
     it must be deleted and re-entered.
   Dictionaries are hashed according to their keys (using APL hashing: 1500⌶).
   ∘ Popping items is fast (since they are dropped from the end).
     Currently popitems is optimized, but not del or di:
     ∘ if you happen to delete the last items by key (del) or index (di),
       it takes as long as deleting randomly.
   ∘ Getting items by key or index is quite fast, as is checking if they are defined. 
   ∘ Adding new items or updating existing items is fast.
   ∘ Deleting random items is slow (but it's faster to delete many at once).
   ∘ If multiple items are added at the same time with the same key,
     the last entry is the only one kept.