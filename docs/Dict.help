--------------------------------------------------------------------------------------
    DictClass: A fast, ordered, and simple dictionary for general use.
    ∆DICT:     Primary function for creating new dictionaries.
               d←∆DICT ⍬       ⍝ Create a new, empty dictionary with default value ⍬.
    Dict:      A utility that returns the full name of the dictionary class, often #.DictClass
               d←⎕NEW Dict     ⍝ Create a new, empty dictionary with no default values.
    Hashes vector KEYS for efficiency on large dictionaries.
    For HELP information, call 'dict.HELP'.
   
    d←∆DICT item
    d← default1 ∆DICT [item1 | item2 | item3]
       item1: (key1 val1)(key2 val2)...
              items passed as key-value pairs; keys and vals may be of any type...
       item2: dict
              A dict is an existing instance (scalar) of a DictClass object.   
       item3: ⍪keys vals [⊂default2]  
              items are passed as 2 vectors (keys, vals); 
              the default may optionally be appended as a scalar.
       default1: any APL object of any shape. It is NOT enclosed.
              E.g.  5   OR   'John'   OR  (2 3⍴⍳6)  OR  ''   OR  ⍬ 
    d←∆DICT [⊂default]
       default2 must either be null: e.g.         ''  OR  ⍬  
               or be enclosed as a scalar: e.g.  5   OR  ⎕NULL OR ⊂,5   OR  (⊂2 3⍴⍳6) OR  (⊂'Mary')
               The default is defined as the disclose of the item, unless it's simple.
               Here:   5   ⎕NULL   ,5   (2 3⍴⍳6)  'Mary'
    d[⊂k1] or d[k1 k2...]
    Return the item of d with key key. Raises an error any key is not in the dictionary, 
    unless a default is specified.
    See also get, get1 
   
    d[⊂k1] ← (⊂v1) OR d[k1 k2...]←v1 v2 ...
    Assign a value to each key specified, new or existing.
   
    keys ← d.keys                     [alias: key]
    Return a list of all the keys used in the dictionary d.
   
    keys ← d.keys[indices]            [alias: key]
    Return a list of keys by numeric indices i1 i2 ...
   
    vals ← d.vals                     [alias: val]
    Returns the list of values  in entry order for  all items; suitable for iteration
         :FOR v :in d.vals ...
   
    vals ← d.vals[indices]            [alias: val]
    Returns a list of item values by numeric indices i1 i2 ...
   
    d.vals[indices]←newvals           [alias: val]
    Sets new values <newvals> for existing items by indices.
   
    d.len  
    Return the number of items in the dictionary d.
   
    [0] d.del (⊂k1) OR d.del k1 k2 ...
    Remove keys from d.  
    Shyly returns 1 for each key. Signals an error of any key is not in the dictionary.
   
    1 d.del (⊂k1) OR 1 d.del k1 k2
    Removes items from d by keys; takes no action if any key is missing.
    Shyly returns 1 for each key found, 0 otherwise.
   
    [0] d.delbyindex indices              [alias: di]
    Removes items from d by indices i1 i2 .... Returns 1 for each item removed.
    Signals an error if any item does not exist.
   
    1 d.delbyindex indices            [alias: di]
    Removes items from d by indices i1 i2 .... Returns 1 for each item removed; else 0.
   
    d.defined (⊂k1) OR d.defined k1 k2
    Return 1 for each key that is defined (i.e. is in the dictionary)
   
    d.clear
    Remove all items from the dictionary.
   
    d.copy
    Return a shallow copy of the dictionary, including its defaults
   
    [default] d.get  k1 k2 ...
    [default] d.get1 k1
    Return the value for keys in the dictionary, else default. 
    If <default> is omitted and a key is not found, returns the existing default.
   
    (k1 k2 ... d.set v1 v2) ... OR (d.set1 (k1 v1)(k2 v2)...)
    (k1 d.set1 v1) OR (d.set1 k1 v1)
    Set one or more key-value pairs
   
    d.items
    Return a list of the dictionary’s items ((key, value) pairs).  
   
    d.popitem n
    Remove and return the n most-recently entered key-value pairs.
    This is done efficiently, so that the dictionary is not rehashed.
   
    [1]    d.inc k1 k2 ...
    Increment the values of keys by 1. If undefined and no default is set, 0 is assumed (incremented to 1).
   
    amount d.inc k1 k2 ...
    Increments the values of keys by <amount>. If undefined and no default is set, 0 i assumed.
   
    [1]    d.dec k1 k2 ...
    amount d.dec k1 k2 ...
    Identical to d.inc (above) except decrements the values by 1 or <amount> respectively.
   
    d ← d.sort OR d.sorta
    Sort a dictionary's keys in place in ascending order
   
    d ← d.sortd
    Sort a dictionary's keys in place in descending order
   
    d.default←value
    Sets a default value for missing keys. Also sets d.hasdefault←1
   
    d.hasdefault←[1 | 0]
    Activates (1) or deactivates (0) the current default; if a default exists, it is ignored
    if hasdefault←0, but it is not deleted; when hasdefault is reset to 1, the default (if any) is restored.
   
    d.querydefault
    Returns a vector containing the current default and 1, if defined; else ('' 0)
   
    Dictionaries preserve insertion order. Note that updating a key does not affect the order. 
    Keys added after deletion are inserted at the end.
    Dictionaries are hashed according to their keys (using APL hashing: 1500⌶)
   
