
⍝H +-------------------------+
⍝H |  dictClass HELP         |
⍝H |  defaultDictClass HELP  |
⍝H |  tinyDict HELP
⍝H +-------------------------+
⍝H dictClass
⍝H    a←⎕NEW  Dict [data]   ⍝ data: initial values and/or default
⍝H defaultDictClass
⍝H    a←⎕NEW DefaultDict [default]
⍝H tinyDict
⍝H    a←TinyDict.new     ⍝ namespace, not class
⍝H
⍝H ---------------------------------------------------
⍝H
⍝H a←⎕NEW DefaultDict [default]
⍝H a←⎕NEW defaultDictClass [default]
⍝H  A fast, streamlined Ordered Dictionary (i.e. an Ordered Hash Table) with default on initialization
⍝H
⍝H a←⎕NEW Dict [initial_values]
⍝H a←⎕NEW dictClass [initial_values]

⍝H     Items are stored in the order created; the dictionary order is maintained, even when a value is changed.
⍝H     (Items may be moved by sorting or by deleting and re-entering.)
⍝H  KEYS and VALUES
⍝H     Keys may be of any type and shape. Case is always respected.
⍝H  ⍵.Default, ⍵.HasDefault
⍝H     If ⍵.HasDefault←1 (default is 0), then
⍝H     ⍵.Default will be returned as the value when missing keys are requested.
⍝H     Initially, ⍵.Default←'' but ⍵.HasDefault←0, so missing keys trigger a VALUE ERROR.
⍝H     If ⍵.HasDefault←1, then the current ⍵.Default is used.
⍝H Note: Yes, there are too many choices in dict for how to set defaults; these are so we 
⍝H       can try out alternatives before culling the herd!
⍝H
⍝H Syntax:    ⍺ ← ⎕NEW Dict specs
⍝H            specs: [[ Format I | Format II | Format III | Format IV ]]
⍝H                I:   [k v | dict | ⊂default)]+
⍝H                II:  (⊂default)                    ⍝ For simple scalar, same as ⊂default
⍝H                III: n×1 Matrix:   ⍪keyVec valVec [default]
⍝H                IV:  0-length Vec: '' or ⍬
⍝H
⍝H     Format I: list of  [k v  |  dict  |  ⊂default]
⍝H           k v:      key-value pair of the form (k1 v1)
⍝H           dict:     an existing dictionary returned from ⎕NEW dict.
⍝H           default:  If a scalar value ⍵1 is detected and it's not a dictionary.
⍝H                     ⊃⍵ will be the default value returned for keys which are not in the dict.
⍝H                     E.g. to enter items or dictionaries AND a default:
⍝H                     for Default←'':     ⎕New dict ((⊂'')(key1 val1)(key2 val2)...)
⍝H                     for Default←⎕NULL:  ⎕NEW dict (⎕NULL(key1 val1)(key2 val2)...)
⍝H     Format II: Enclosed or simple scalar
⍝H         general ⍵:  Initialize empty dictionary with Default←⊃⍵
⍝H           1:            "        "       "        "  Default←1  (numeric 1)
⍝H           0:            "        "       "        "  Default←0  (numeric 0)
⍝H           ⎕NULL:        "        "       "        "  Default←⎕NULL
⍝H     Format III: Matrix of shape 2 1 or 3 1
⍝H           ⍪keys vals [default]:
⍝H                     First row is ⊂keys, 2nd row is ⊂values, third is the default (if present).
⍝H                     ⎕NEW dict (⍪keys vals)  ←-→   ⎕NEW dict (↓⍉↑keys vals)
⍝H     Format IV: 0-length Vector arg
⍝H           '' or ⍬   Initialize empty dictionary with Default←'' or Default←⍬
⍝H
⍝H  ┌────────────────────────────────────────────┐─────────────────────────────────────────────┐
⍝H  |a ← ⎕NEW Dict                               │ Create empty dict, no default               │
⍝H  │a ← ⎕NEW Dict (1)                           │ Create empty dict, default: 1               │
⍝H  |a ← ⎕NEW Dict ('' | ⍬)                      │ Create empty dict, default '' or ⍬          │
⍝H  │a ← ⎕NEW Dict (⊂default)                    │ Create empty dict, default (default)        │
⍝H  │a ← ⎕NEW Dict ((k,v)(k,v))                  │ Create dict with k v pairs, no def          │
⍝H  │a ← ⎕NEW Dict ⍪(k1 k2..)(v1 v2..) [default] │ Create dict with keys vals and def          │
⍝H  │a ← ⎕NEW Dict (d1,d2)                       │ Create dict from dicts d1 d2                │
⍝H  │a ← ⎕NEW Dict ((k,v)d1(k,v)d2)              │ Create dict from mix of k v pairs and dicts │
⍝H  └────────────────────────────────────────────┘─────────────────────────────────────────────│
⍝H
⍝H  Ordered Dictionary Creation
⍝H   ∘ Create empty
⍝H     a ← ⎕NEW Dict                              ⍝ Empty dictionary
⍝H   ∘ Create and Insert key-value pairs
⍝H     a ← ⎕NEW Dict ((key1 val1)(key2 val2)...)  ⍝ With items, i.e. key-value pairs
⍝H   ∘ Create empty with default value
⍝H     a ← ⎕NEW Dict (⊂default)                   ⍝ Argument passed must be scalar, which will be disclosed.
⍝H   ∘ If b is an existing dict, then:
⍝H       a ← ⎕NEW Dict (b)
⍝H     copies b's values into a.
⍝H     - Attributes are NOT copied via ⎕NEW.
⍝H     - To copy all keys, values, and default: Use a←b.Copy
⍝H   ∘ Pairs and dictionaries may be assigned to a new dictionary on creation:
⍝H       c←  ⎕NEW Dict (a (key1 val1) (key2 val2) b)
⍝H     Elements are assigned IN ORDER, left to right, with the last value "sticking."
⍝H     Here, c is made up of the contents of dictionary a, two key-value pairs, and b.
⍝H   ∘ To make a copy, called a, of a dictionary b, including its Defaults, use Copy:
⍝H       a ← b.Copy
⍝H
⍝H  ┌─────────────────────────────┐
⍝H  | a.default←val   [*]         │
⍝H  │ w←a.default                 │
⍝H  │ w←a.has_default             │
⍝H  │ a.has_default←b             │
⍝H  │ hasdef def←a.query_default  │
⍝H  │ ————————————————            │
⍝H  │ * See ⎕NEW Dict             │
⍝H  └─────────────────────────────┘
⍝H  Manage Default Values
⍝H   ∘ At initialization, unless a (dictionary-wide) default has been set,
⍝H     a VALUE ERROR results from trying to retrieve a value for a missing key.
⍝H       a←⎕NEW Dict
⍝H       a[10]
⍝H     VALUE ERROR
⍝H     This even occurs when retrieving values from a mix of present and missing keys.
⍝H   ∘ The default may be set to any scalar or vector value. When you set it, HasDefault←1 for you.
⍝H     (If you then set HasDefault←0, the Default value is "hidden" until HasDefault←1 again).
⍝H     ⍺.default←⍵
⍝H     Example:
⍝H       a←⎕NEW Dict ⋄ a.default←1 3
⍝H       a[10]
⍝H     1 3
⍝H   ∘ Check defaults
⍝H     def←⍺.default
⍝H   ∘ Check whether a default exists
⍝H     bool←⍺.has_default
⍝H   ∘ Turn on the default (If turned on and Default hasn't been set, it's set to Default←'').
⍝H      ⍺.has_default←bool
⍝H   ∘ Query current has_default flag and default (⎕NULL if not set):
⍝H     hasdef def←⍺.query_default
⍝H  The default may also be set in the ⎕NEW call if there is an argument of this form:
⍝H   ∘ scalar
⍝H   ∘ non-dictionary (not of nameclass 9.2, or if 9.2 doesn't have method isDict or if it does, isDict returns 0).
⍝H
⍝H  ┌────────────────────────────────────────┐
⍝H  | a[k1 k2]←v1 v2                         │
⍝H  │ v1 v2←a[k1 k2]                         │
⍝H  │ a.Vals[i1 i2]←v1 v2                    │
⍝H  │ a.Values[i1 i2]←v1 v2                  │
⍝H  │ k1 k2←a.Keys[i1 i2]                    │
⍝H  │ a.import keys vals                     │
⍝H  │ keys vals←a.export                     │
⍝H  │ i1 i2←a.Iota k1 k2   ⍝ a.Keys ⍳ k1 k2  │
⍝H  └────────────────────────────────────────┘
⍝H  Setting keys and values
⍝H     ⍺[k1 k2...]←v1 v2...
⍝H  Retrieving values by key
⍝H     v1 v2...←a[k1 k2...]
⍝H  Setting values by index (indices must exist)
⍝H     ⍺.Values[i1 i2...]←v1 v2...
⍝H     ⍺.Vals[i1 i2...]  ←v1 v2
⍝H  Retrieving values by index (indices must exist)
⍝H     ⍺.Values[i1 i2...]
⍝H     ⍺.Vals[i1 i2...]
⍝H  Retrieve all values
⍝H     ⍺.Values
⍝H     ⍺.Vals
⍝H  Setting Keys by Index
⍝H     **NOT ALLOWED**
⍝H  Retrieving Keys by Index
⍝H      k1 k2...←⍺.Keys[i1 i2...]
⍝H  Retrieving all Keys (in index order, by default the order entered)
⍝H      k1 k2...←⍺.Keys
⍝H  Importing keys and values en masse from vectors keys vals
⍝H      ⍺.import keys vals
⍝H      Equivalent to: ⍺[keys]←vals   ⍝ But faster!
⍝H      Note: if a key exists, its value is updated in its original order.
⍝H  Exporting keys and values en masse as vectors keys vals
⍝H      keys vals ← ⍺.Export
⍝H      Equivalent to:  keys vals← ⍺.(Keys Vals) ⍝ But faster!
⍝H  Finding index of each key (like ⍳) (or Len if not found)
⍝H      i1 i2... ← a.Iota k1 k2
⍝H      Equiv. to a.Keys ⍳ key1 key2   ⍝ But much faster!
⍝H
⍝H  ┌──────────────────────────────────────────────┐
⍝H  | {b1 b2}←a.del k1 k2                          │
⍝H  │ {b1 b2}←(ignore←0) a.del k1 k2               │
⍝H  │ {b1 b2}←a.del_by_index i1 i2                 │
⍝H  │ {b1 b2}←(ignore←0) a.del_by_index i1 i2      │
⍝H  │ {b1 b2}←a.di i1 i2                           │
⍝H  │ a←a.clear          ⍝ Returns a               │
⍝H  └──────────────────────────────────────────────┘
⍝H  Delete key-value pairs by key (returns the unique keys deleted)
⍝H  If left arg is 1 (default 1), missing keys are ignored and 0 is returned for each.
⍝H  If 0, missing keys generate an ERROR signal.
⍝H  Returns 1 for each key deleted; 0 otherwise.
⍝H      {b1 b2}...← [[1|0]] ⍺.del k1 k2...
⍝H  Delete key-value pairs by index (returns the unique keys deleted)
⍝H  ∘ All indices must be valid.
⍝H      {b1 b2}...← ⍺.del_by_index i1 i2...
⍝H      {b1 b2}...← ⍺.di i1 i2
⍝H  ∘ Invalid indices to be ignored.
⍝H      {b1 b2}...← 1 ⍺.del_by_index i1 i2...
⍝H      b1 b2...← 1 ⍺.DI i1 i2
⍝H
⍝H  ┌───────────────────────────────────────────┐
⍝H  | b1 b2←a.has_keys k1 k2                    │
⍝H  │ k1v1 k2v2←a.items                         │
⍝H  │ k1v1 k2v2←a.pairs                         │
⍝H  │ kv_Mx←a.table                             │
⍝H  │ nitems←a.len(gth)                         │
⍝H  └───────────────────────────────────────────┘
⍝H  Query if a key-value pair exists, by key. Returns 1 for each pair that exists...
⍝H      b1 b2...← ⍺.has_keys k1 k2...
⍝H  Get all key value pairs
⍝H       k1v1 k2v2...←⍺.items
⍝H       k1v1 k2v2...←⍺.pairs
⍝H  Get all key value pairs as a matrix
⍝H      key_value_matrix←⍺.table
⍝H  Get # of items in a dictionary
⍝H      ⍺.len
⍝H      ⍺.length
⍝H
⍝H  ┌────────────────────────────────────────┐
⍝H  | k1v1 k2v2←a.Pop 2                      │
⍝H  │ a['penult' 'ult']←v1 v2   ⍝ Push       │
⍝H  │ {}a.sort/A      ⍝ Sort up in place     │
⍝H  │ {}a.sortD       ⍝ Sort dn in place     │
⍝H  │ ix←a.gradeup    ⍝ Return indices       │
⍝H  │ ix←a.gradedown/gradedn                 │
⍝H  └────────────────────────────────────────┘
⍝H  Popping the first <n> items from the Ordered Dictionary
⍝H       k1v1...knvn ← ⍺.pop count
⍝H  Removes and returns the LAST <count> entries from the dictionary (in order of creation, not update).
⍝H  Note 0: The value is returned shyly.
⍝H  Note 1: This uses the efficient idiom for removing items from hashed vectors: item↓⍨←-count
⍝H  Note 2: to "push" items onto the end of the dictionary, simply add them, ONLY if the key is new.
⍝H      a['2nd to last' 'last'] ← 'val1' 'val2'
⍝H      a.Pop 2
⍝H  ┌───────────┬────┐
⍝H  |2nd to last│val1│
⍝H  ├───────────┼────┤
⍝H  │last       │val2│
⍝H  └───────────┴────┘
⍝H  If keys aren't new, you can delete them first and readd, so they are added at the end.
⍝H  This guarantees that a possibly new <key> is the most recent (first Pop'd) item in dictionary.
⍝H     1 a.del ⊂'test' ⋄ a[⊂'test']←⊂'THIS IS A TEST!'
⍝H     ⎕←a.pop 1
⍝H  test   THIS IS A TEST!
⍝H
⍝H  Sorts items in ascending (Sort/SortA) or descending (SortD) order IN PLACE.
⍝H  Uses Dyalog total array ordering.
⍝H  Returns the dictionary itself (not a copy!). Use {} to suppress returned dictionary.
⍝H     {}⍺.sort  or  {}⍺.sortA
⍝H     {}⍺.sortD
⍝H  Return the indices for the dictionary's keys in sorted order
⍝H     ix←a.gradeup   (ascending)
⍝H     ix←a.gradedown (descending)
⍝H     ix←a.gradedn   (descending)
⍝H
⍝H ------------------------------------------------------
  ⍝      TinyDict (namespace TinyDictNs)
  ⍝
  ⍝ A simple, namespace-based, dictionary. Fast, low overhead.
  ⍝ A tinyDict is an ordered dictionary, with items stored in the order entered;
  ⍝ an item whose value is replaced maintains its original ordered position. 
  ⍝ (Order can be changed only by deleting and re-entering an item via Del and Put/1).
  ⍝  NB: ∆TINYDICT is promoted to the same namespace as <tinyDict>, when it's ⎕FIXED.
  ⍝      a←∆TINYDICT pairs 
  ⍝  is comparable to (regular) dict function ∆DICT, which is similarly promoted.
  ⍝  See also:  (namespace) dict
  ⍝
  ⍝ dict ← TinyDict.new0
  ⍝     Creates a dictionary with no values and Default←⍬
  ⍝ dict ← [default] TinyDict.new  pairs
  ⍝
  ⍝ r←dict.get  key1 key2 ...
  ⍝     Like dict.get1, but for multiple keys.
  ⍝
  ⍝ r←dict.get1 key
  ⍝     Returns the value for key <key>, if defined.
  ⍝     If not, but a default exists, returns that default.
  ⍝     Otherwise, signals a key-undefined error.
  ⍝     If there is one key, dict.Get1 key ≡≡ ⊃dict.Get key
  ⍝
  ⍝ {values}←key1 key2 ... dict.put val1 val2 ...    [DYADIC: keys put values]
  ⍝     Like dict.put1, but for multiple keys and values.
  ⍝
  ⍝ {values}←dict.put  (key1 val1)(key2 val2)...     [MONADIC: put (k1 v1)(k2 v2)...]
  ⍝     Enter one or more key-value pairs into the tinyDict.
  ⍝     Remember to enclose the argument if there is only one key-value pair:
  ⍝        r←dict.put ⊂'key1' 'val1'
  ⍝        r←dict.put ('key1' 'val1')('key2' 'val2')
  ⍝
  ⍝ {value}←key1 dict.put1 val1
  ⍝     Sets the key specified to the corresponding value, returning the value.
  ⍝     To set multiple keys, see put or put_pairs
  ⍝
  ⍝ {r}←dict.del1 key
  ⍝     Deletes the specified key. If it existed (and was deleted), returns 1; else 0.
  ⍝
  ⍝ {r}←dict.del key1 key2 ...
  ⍝     Deletes the specified keys. Returns 1 for each that is found; 0 otherwise.
  ⍝
  ⍝ r←dict.table
  ⍝     Returns key-value pairs as a table.
  ⍝
  ⍝ dict.default←def   (See new and ∆TINYDICT for initial value).
  ⍝     Sets the default to be returned for the value returned when a key is not found.
  ⍝     dict.default may be undefined.
  ⍝     To make undefined, do: dict.⎕EX 'default'
  ⍝ 
  ⍝ dict.has_default (function)
  ⍝     Returns 1 if a default has been defined.
  ⍝     Returns 0 if no default has been defined.
  ⍝
  ⍝ dict.keys
  ⍝     A list of keys in order
  ⍝
  ⍝ dict.vals
  ⍝ dict.values
  ⍝     A (corresponding) list of values in order

  ⍝ TinyDict.help
  ⍝     Report this HELP information (as an edit [⎕ED] window).
