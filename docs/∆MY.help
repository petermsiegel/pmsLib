     Documentation - ∆MY, ∆MYgrp.∆MYX, ∆MYgrp.∆THEIR
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
∆MY:  myStat ← ∆MY
      myStat: a namespace reference; the namespace is a "static" (permanent if ⎕SAVEd)
              namespace for objects associated with the function or operator immediately calling ∆MY.
∆MY:
  "A function returning a local namespace for static variables for the function/op calling ∆MY,
   creating it if required. Initializes special "pseudo-system" variables as well.
  ∘ In this approach, the namespace containing the calling function will have a special
    namespace <static> added, defined as '⍙⍙.∆MY' below, which will contain static info for all such functions in that namespace.
    Thus if a variable 'MATH.BASIC.COS' is copied from workspace BIGINTEGER,
    and requires its static data, this is what's needed:
      'MATH.BASIC.COS' 'MATH.BASIC.⍙⍙.∆MY.COS' ⎕CY 'BIGINTEGER',
    since MATH.BASIC.⍙⍙.∆MY.COS is the name of the namespace containing static data
    associated with MATH.BASIC.COS."
Method used:
 1. If it does not exist, creates a namespace <static> in the namespace, <my>, in which
    ∆MY's caller <me> lives, i.e. <my>.<static>.
    For <static> a special string is defined below: ⍙⍙.∆MY
 2. If it does not exist, creates a namespace <me> within <static>, where
    <me> is the unqualified (simple) name of the caller.
   a. Iff that space is new, sets "pseudo-system" variables:
          ∆MYNAME←me           ⍝ Simple name of the caller
          ∆MYNS←my             ⍝ Fully qualified name (string) of the namespace the caller lives in.
          ∆FIRST←1             ⍝ This was the first time ∆MY was called for this function.
   b. Iff that space is not new, sets "pseudo-system" variables:
          ∆FIRST← 0            ⍝ This was not the first time ∆MY was called for this function.
 3. Returns a reference, <myStat>, to a static namespace for the caller:
    <static>.<me> in namespace <my>, i.e. <my>.<static><.me>
    ∘ If called from an unnamed function, that function's caller is used if named,
      else the name '__anon__' is used.
    ∘ If called from outside any function, '__null__' is also used.

 Oddities: If called from a named dfn inside a tradfn, ∆MY accepts and uses the name of
    the dfn. This could wreak havoc if there is a "global" dfn with the same name.
    The solution is to assign ∆MY directly to a var within the caller and then pass around the var.
        ∇ MYTRADFN; stat; myFn
          stat←∆MY
          :IF stat.∆FIRST ⋄ ... set up stat.MYDATA ⋄ :ENDIF
          myFn←{ stat.MYDATA ...} ⋄ myFn 1 2 3
        ∇
For efficiency, call ∆MY once per function, e.g.
          :IF (my←∆MY).∆FIRST
               my.table←...
               ...
           :ENDIF
               operate_on(my.table)...
               
∆FIRST:  Alternative to ∆MY.∆FIRST
         (Slightly slower than latter, given additional call to ∆MYX internally).

∆MYX:  staticNs  ← [homeNs] ∆MYX fnName
       staticNs  ← [homeNs] ∆MYX callLvl

         fnName: name of the function. 
         callLvl: the fn at this level on the call stack
         homeNs: the namespace the function is from

         Returns:  staticNs, the static namespace for the specified function.
         Example:  Reset the ∆FIRST flag for function 'myfn' so next function use is first:
                  (∆MYX 'myfn').∆RESET
