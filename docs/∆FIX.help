  ∆FIX:     Extension to ⎕FIX that supports special quoted strings/here-strings:
  Syntax:   Uses a superset to standard ⎕FIX syntax.
            ∘ ⍵ (per ⎕FIX) is a filename or a vector of char vectors (code).
              Extension: If ⍵ is a char vector, the prefix :file// is supplied as needed.
            ∘ ⍺ 
              by default:  ⍺←0 0 0
              ∘ Non-standard options for ⍺: a[0 1 2] 
              ⍺[0]
                 2   (default). Fix set of objects in file.
                'n' (nofix): Show the result of translation without FIXing. Typically ↑'n' ∆FIX 'line1' 'line2' ...
                'e' (edit): Go into the editor to repeatedly test/modify the sample code and show the results of translation.
                           'e' ∆FIX ⍬, 'e' ∆FIX 'my_file', 'e' ∆FIX 'line1' 'line2' ...
                ¯1  Set ⍺[0] to 2 (∆FIX: default).
              ⍺[1]
                 1   DEBUG←1
                 0   DEBUG←0 (default)
                ¯1   DEBUG←0 (leave as default)
              ⍺[2]
                 1   COMPRESS←1 (see ::COMPRESS)
                 0   COMPRESS←0 
  
  Enhancements to ⍵ (content in filename or directly as code) appear below.

    Note: \n in schemas below denotes an actual newline character in an input file;
          unless stated otherwise, case is ignored;
          CR: denotes a carriage return (UCS 13);
          NL: a linefeed/newline (UCS 10);
          ↑(...): an APL matrix generated on the fly.
          [[VRNSM][CEX]] or variants: modifiers suffixed to various string types. See STRINGS below.

0. SUMMARY
    DQ Str              str← "sample\nmore"[[VRNSM][CEX]]                    ⍝ Vector, Return, Newline/LF, Scalar, Matrix
                        str← «sample\nmore»[[VRNSM][CEX]]                    ⍝ Comment, Escape, eXdent
    TQ Str              str←"""\nsample\nmore\n"""[[VRNSMCE]]                ⍝ X implicit.
    HERE String         str←::: token [:[VRNSM][CE]] ... \n [:][END]token[:] ⍝ X implicit
    HERE Comment        ::: ⍝ token[END] ... \n ⍝ token[END]
    Continuation        line1 ... \n line2 ... \n line3                      ⍝ .., ..., or …
    Pointers            name←${dfn} ${tacit} $by_name                        ⍝ Access: name.Run, name.Exec
    Pseudo-Strand fn    ( code1⍮ code2⍮ code3 )                              ⍝ ⍮ behaves like an APL dyadic function...
    Pseudo-Strand punct ( code1; code2; code3 )                              ⍝ Regular semicolon for indexing.
    Atom List           `  word int "quoted"                                 ⍝ Single item = 1-elem list 
    Atom Item/List      `` word                                              ⍝ Single item = scalar
    Map                 word int "quoted" → code                             ⍝ Left-side as for Atom List
    Map Item/List       word → code                                          ⍝ Left-side as for Atom Item/List 
    Fence               ← abc                                                ⍝ FÍX_t← abc 
    Null Namespace      ()                                                   ⍝ (⎕NS ⍬)
    Hex Literal         0X0FAB                                               ⍝ or 0xofab (case ignored)
    Oct Literal         0o0712                                               ⍝ or 0O0712 (with "oh")
    Bin Literal         0B101101110                                          ⍝ or 0b101101110
    Numeric Spacers     123_456.789_123
    Macro Definitions    
       Def              ::DEF  name← value
       Null             ::DEF  name←
       UNDEF            ::DEF  name 
       Literal          ::DEFL name← value 
       Evaluate         ::EVAL name← code                                    ⍝ Alias ::DEFE
    Literal Notation
       Static           ::STATIC  name← Array or Namespace Notation
       Dynamic          ::DECLARE name← Array or Namespace Notation
    Include Files       ::INCLUDE file1.ext file2.ext etc.
    IF/ELSEIF Preprocessor Directives
       IF               ::IF code 
         Name Defined    ::IF ::DEF "name"
       ELSEIF           ::ELSEIF code 
         Name Defined    ::ELSEIF ::DEF "name" 
       ELSE             ::ELSE 
       ENDIF            ::END[IF]
    Miscellany
       ::DEBUG [[ON | OFF*]]
       ::DEBUG           Same as ::DEBUG ON
                         If DEBUG is ON, extra details are shown about macro substitution, etc. going forward.
                         Debug may be turned on or off for specific code sections...
       ::COMPACT [[ON | OFF*]] 
       ::COMPACT         Same as ::COMPACT ON   
                         COMPACT is global: when seen, all comments and blank lines are removed when FIXing.
                         COMPACT is ignored, when an object is displayed, returned, but not FIXed.
       ::MACROS          List all actively defined macros on stdout (⎕←...).
       Format            ⎕F "String {⍪⍵⍵⍴⎕TS} with multiple 2-D {⍳⍵⍵} fields" 3 (2 2)     
       Range             1 ⎕TO 10 2, 1 3 ⎕TO 10
       Assert            ⎕ASSERT 2=⍴⍴⍵:                     
       Static NS         my←⎕MY       
       Sink varname      ⎕TMP             
       Fix Tradfn        ←::TRADFN """\n header\n body1\n etc\n"""

     
1. STRINGS 
   DQ Strings: Multi-line Double-quoted Strings (Use "" to include internal double quotes)
      [str←] "sample\nmore"[[VRNSM][CEX]]
      Options: [VRNSMC][E][X] in either case...
            V:  'sample' 'more'          ⍝ Vector of vectors. DEFAULT.
            R:  ('sample',CR,'more')     ⍝ (Carriage) return-separated
            N:  ('sample',NL,'more')     ⍝ Newline- / linefeed-separated
            S:  ('sample more')          ⍝ Space-separated
            M:  (↑'sample' 'more')       ⍝ Matrix Format
            C:  ' '                      ⍝ Comment-mode (text treated as a single blank- other options irrelevant, ignored))
            E:  'sample more'            ⍝ Escape-format (backslash at end of line is ignored; line continues) 
              "long\       ==> 'longword'      "short \     ==>  'short words'
              word"E                           words"E
            X:  'one\n  two\nthree'      ⍝ Exdent-mode. Leading blanks are removed from each line, treating the 
                                         ⍝ the left-most line (with the least leading blanks) as having 0 blanks.
                                         ⍝ This even works on a single-line DQ-string.
              test←"  one               
                        two
                      three"X
              t2←"     Won't you trim me?"X  ==>  t2←'Won''t you trim me?'

  DQ Strings, variant: Use « » in place of "..." above. (Use »» to include internal doubled »)
      [str←] «sample\nmore"»             ⍝ Same as str← "sample\nmore", but allows embedded ", «, or ' w/o doubling.

  TQ Strings: Multi-line triple double-quoted strings (No """ allowed internally)
        [str←]"""                    ==> (V option)
              line 1 of string           str← 'line 1 of string' 'line 2'
              line 2
        """[[VRNSM][CE]] 
      ∘ TQ-strings implicitly include the X option, extending all lines based on the left-most (including the last line,
        containing the closing """).
    ⍝ TQ String lines are aligned each under the previous. On output, they are exdented based on left-most line.
        abc←"""                ==>   abc←'one' 'two' '  three' 
            one' 
            two
              three
            """'  
    ⍝ Since closing """ is left-justified here, all input leading blanks are preserved on output.
        abc←"""               ==>   abc←'     one' '     two'  '       three'
            one
            two
              three
        """'       

  HERE Strings: Multi-line Strings ended with delimiter
        [str←] ::: my_token [:[VRNSM][CEX]]   ==> (V option)   
              any text at all                      str←('my_end_token' 'more_text') ⍝ Nothing more    
              more text
        [:][END]my_token[:] 
      ∘ my_token can be any string allowed as an APL variable, with leading and/or trailing colon (:).
      ∘ The ending token may optionally be prefixed by END (either case). A simple END is NOT allowed.
      ∘ Options are the same as for DQ-strings, except the X (exdent) option is automatically specified.
      ∘ To suppress exdentation, place the closing end token (here: "my_end_token:") at the left-most position (as shown);
        otherwise, the left-most line (including the end token line) will determine the indentation.
  HERE Comments: Like HERE strings, but comments only.
       ::: ⍝ my_token           ::: ⍝ Documentation
           any text ...             anything
       ⍝ [END]my_token          ⍝ EndDocumentation
2. Continuation Lines for Code: 2-3 dots (.., ...) or ellipses … at end of a line (outside quotes and preceding any comments)
      are replaced by a single blank and concatenated with the following line:
          example← 1 2 3   ...      ==>  example← 1 2 3 4 5 6 ⍳ 2
                   4 5 6 ⍳ ...
                   2
          str← ↑'one' …             ==> str← ↑'one' 'two' 'three'
                'two' …
                'three' 
          But note that ellipses/dots within quotes are characters and are not treated specially.
          str←  "one ...            ==> str← 'one ...' 'two ...' 'three'
                 two ...
                 three"

3. Special punctuation (symbols or sequences)
  $           "Pointer" Declarations: 
              Convert a dfn {...}, tacit function (...) or a non-niladic function by-name to a "pointer",
              i.e. a namespace containing a niladic fn Exec and a dyadic/monadic fn Run.
                   ptr1←${1 2 3 4⍳⍵}   ⋄  ptr2←$(+.×)    ⋄   ptr3←$My_Fn_Name
              The function can be called monadically, e.g.:  ptr1.Run 3, or dyadically: 1 2 3 ptr2.Run 3 4 5;
              Or for niladic functions (e.g. 'procedures'): ptr3.Exec  (which calls ptr3.Run ⍬), 
              where Run is the original (non-niladic) function passed. 
              ∘ Useful for passing arbitrary functions as pseudo-first-class objects.  
              ∘ Names are not required when passing to functions or when grouping into arrays:
                  myPtrs← ${1 2 3 4⍳⍵} $(+.×) $My_Fn_Name 
                  ≢⎕←myPtrs
              3
              [${1 2 3 4⍳⍵}]  [$+.×]  [$r←My_Fn_Name x⋄r←○1] 
  … .. ...    Continuation symbols: See continuation lines above
  ;           Implicit Pseudo-Strand notation: 
              The semicolon (;) is replaced by APL sequence  (,⍥⊆) except when appearing: 
                a) directly (w/o intervening parentheses) within brackets [], or 
                b) within quotes.
              ∘  Given: M← 2 3⍴1 2 3
                 (123 ; M[0 ; (1 ; 2)])  ==> (123 (,⍥⊆) M[0 ; (1 (,⍥⊆)2 )])    ==> 123  2 3
  ⍮           Explicit Pseudo-Strand notation (behaves like an APL function).  
              The char ⍮ (⎕UCS 9070) is replaced by (,⍥⊆) when appearing outside quotes.
  `           Atom Vectors: 
              Any following APL names (simple or com.plex) or numbers (¯123 25J34) are treated as "atoms" and
              placed within quotes; quoted strings (SQ or DQ strings) are accepted as is:
              ∘  ≢`example  ==>  1    ≢`45  ==> 1      ≢`one 2 three  ==>  3
              ∘  `¯123 cat.dog 25J34' ==>  (¯123 'cat.dog' 25J34)   
  ``          Atoms Scalar/Vectors: 
              Like `, except a single APL name will be treated as a single character vector, not a vector of strings.  
              ∘  ≢``example ==>  7    ≢``45 ==> 1      ≢``one 2 three ==>  3
  →           Maps (Vector): 
              Dyadic → treats a sequence of APL names and numbers to its left as a set of atoms
              (see ` above), joining it via a pseudo-Strand construction (,⍥⊂) to the (unaffected) objects to its right. 
              ∘  name1 name2 → result   ==>  ((`name1 name2) result)  ==>  (('name1' 'name2' )(,⍥⊂) result
              ∘  name1       → result   ==>  ((`name1)       result)  ==>  (,⊂'name1' )       (,⍥⊂) result
  →→          Maps (Scalar/Vector): 
              Dyadic →→ is like dyadic →, except a single name to its left is treated as if prefixed by ``:
              ∘  name1 name2 →→ result   ==>  ((``name1 name2) ⍮ result)  ==>   ('name1' 'name2') (,⍥⊂) result 
              ∘  name1       →→ result   ==>  ((``name1)       ⍮ result)  ==>   ('name1' )        (,⍥⊂) result 
  ←           Fence:
              When ← is (a) the leftmost token in a line or follows any of these chars:  "[:{(⋄", 
              its value is thrown away, actually assigned to a special variable name, available at ⎕TMP below.
              It is useful when a side-effect is required:   
                  Copy←{⍺←⊢ ⋄ ←⍺ ⎕CY ⍵}   is equivalent to:    Copy←{⍺←⊢ ⋄ FÍX_t←⍺ ⎕CY ⍵} 
  ()          Empty Namespace:
              Empty parens return an empty namespace (⎕NS⍬). 
              See also APL Literal Notation (:STATIC and :DECLARE).
  ∉           Not In (set function): eye-candy equiv. to (~∊). ⎕UCS 8713.
  ←←          Extended assignment (EXPERIMENTAL).

4. Numeric Punctuation (Prefixes, Spacers): Allowed only in wholly real numbers (no 'J' infix).
  0Xnnn       Hexadecimal number [xX]:  0XF32A       ==>    62250
  0onnn       Octal number [oO]:        0o0773       ==>      507   
  0Bnnn       Binary number [bB]:       0b10111010   ==>      186
  nnn_mmm_ppp Underscore spacers in numbers: underscores in numbers (after 0X, 0o, 0B) are ignored, including in exponents.
                123_456.789_012E_45    =>   123456.789012E45
 
      ⎕← 0XF32A  0o0773 0b10111010
  62250  507  186 

5. ∆FIX Preprocessor Directives
  Each directive MUST appear on its own line. Directives start with 2 colons.
  The case of the directive is ignored.

5A. MACRO DEFINITIONS
    name: Either a simple or complex APL name (test, ns.subns.test). If a simple name, it could
          match any simple name within a complex expression. If complex, it must match the complex name exactly.
          A name may include #, ⎕SE, ##, or names beginning with ⎕ or : (as in ⎕MY_SYS or :MY_DIRECTIVE).

    DEFINE AS EXPRESSION: 
    ::DEF  name← expression     [⍝ ...]
          Replaces name with (expression) wherever it is found outside quotes or comments. 
          Comments and trailing blanks on the ::DEF line are ignored.
          Expression includes parentheses to avoid surprises:
            ::DEF PI← ○1
            PiSQ←  PI * 2    ==>    (○1)*2 i.e. 3.14...*2   <=NOT=>   ○1*2, i.e. ○(1*2) = ○1, i.e. PI!
          Note that the resulting expression will be executed each place it is used.
          See ::DEFL for a way to create an expression that will be executed only once at ∆FIX time.

          Special symbols like ⍮ may be used within macro expressions...
          ::DEF and ::DEFL (q.v.) 
            ::DEF CAT ⍮  
            1 2 3 CAT 4 5        ==>  1 2 3 ((,⍥⊆)) 4 5 
            ::DEF CAT {⍺⍵}
            1 2 3 AT 4 5         ==>  1 2 3 {⍺⍵} 4 5

    DEFINE AS EMPTY
    ::DEF name←
          Replaces name with a null (empty) expression.
            ::DEF NOP←
            2 + NOP 3      ==>    2 + 3
          These are most useful with conditional macro creation (see ::IF below).

    UNDEFINE
    ::DEF name
          Deletes any macro association for name. I.e. no replacement will take place for name.
          ::DEF TIMES← ×
          2 TIMES 3     ==>    2 (×) 3     (equiv. to 2 × 3)
          ::DEF TIMES
          2 TIMES 3     ==>    2 TIMES 3

    DEFINE LITERALLY
    ::DEFL name← expression
          Replaces name with expression, including any comments.
          The replacement expression is used exactly as entered, except that trailing blanks are trimmed. 
            ::DEF GROUPA← ⍝ Exclude me: 
            ::DEF GROUPB← ⎕←
            GROUPA  'Does nothing'       ==>  ⍝ Exclude me:'Does nothing'
            GROUPB  'Is printed'         ==>  ⎕←'Is printed'

    DEFINE AS EVALUATED (⍎) 
    ::EVAL name← expression
    ::DEFE name← expression 
          Replaces name with the result of evaluating the expression in the calling environment via ⍎,
          using ⎕FR←1287 and ⎕PP←34 for the greatest resolution possible.
          The result is converted back to a string and must consist of a single line.
          If an evaluation failed, the value will lead to a runtime SYNTAX ERROR (⎕EN=2)
            ::DEFE TS←⎕TS                    ::DEFE TS←⎕TS_NONSENSE 
            ⎕←TS                             ⎕←TS
            ⎕←2021 3 26 0 13 16 760          ⎕←(⎕TS_NONSENSE ∘EVALUATION ERROR∘)  
          Use ::DEFE to create a ∆FIX-time constant that won't change during execution.
            ::DEFE PI←○1
            ⎕←PI
            ⎕←3.141592653589793238462643383279503

      ::DEBUG [ON* | OFF]
            Turns ON or OFF debugging mode, which shares additional info as ∆FIX comments in the output.
            See ∆FIX macro '::DEBUG' (always 1 or 0).
      ::COMPRESS [ON* | OFF]
            Turns ON or OFF compression mode. If ON, removes all comments, blank lines, and extra blanks 
            and ⋄ chars  on code lines.
            ::COMPRESS is global. If ON when the input has been fully scanned, compression operates on every line output.
            See ∆FIX macro '::COMPRESS' (always 1 or 0).

  5B. APL ARRAY AND NAMESPACE LITERAL NOTATION  
        APL Array and Namespace Literal Notation allows users (of a future Dyalog APL) to
        specify a mixture of multidimensional arrays and complex namespaces within a single, 
        possibly multiline, expression.       See  https://github.com/abrudz/apl-array-notation 

    1. DEFINE STATIC (CONSTANT) ARRAYS OR NAMESPACES
    ::STATIC  name← expression
        Define name as the constant (∆FIX-time evaluated) expression within the user program.
        If the expression contains APL Array and Namespace Literal Expressions, they are evaluated once at ∆FIX-time.
        They may contain variables or values executed earlier at run-time or visible in the caller's namespace.
        If any component creates output (via ⎕← or a fn call), that output appears when ∆FIX is executed.
          ::STATIC multiNow←    [ 'iota10'  ⋄ ⍳10   ⍝ Creates a  declaration evaluated at ∆FIX time.
                                  'revAlph' ⋄ ⌽⎕A
                                  'when'    ⋄ ⎕TS   ⍝ Set as a constant, when an object is ∆FIXed.
                                ]
          ::STATIC employee←    (name: "John Smith"
                                 addr: "45 Main St."
                                 sal:  ?1000   ⍝ Executed exactly once, at ∆FIX-time only.
                                )
    2. DEFINE DYNAMIC ARRAYS OR NAMESPACES 
    ::DECLARE name← expression
        Define name as the expression given, to be evaluated at run-time.
        If the expression contains APL Array and Namespace Definition extensions, each is evaluated when the statement
        is executed (during run-time).
          ::DECLARE multiLater←  [ 'iota10'  ⋄ ⍳10  ⍝ Creates a declaration to be evaluated at run-time
                                  'revAlph' ⋄ ⌽⎕A
                                  'when'    ⋄ ⎕TS  ⍝ Changes on each call, if internal to a object.
                                ]
          ::DECLARE employee←   (name: "John Smith"
                                 addr: "45 Main St."
                                 sal:  ?1000     ⍝ Executed each time this statement is seen in the execution flow 
                                )

  5C. INCLUDING FILES 
      ::INCLUDE filename1 [filename2 ...]
      Includes verbatim all the lines in whatever files are specified. The full file name and extension must be specified.
      ∆FIX will search a variety of directories automatically, minimally: . and ..

  5D. IF/ELSEIF Directives: These directives are evaluated at ∆FIX time. 
      A directive is considered TRUE, if its expression:
          evaluates to a numeric object that isn't scalar or vector 0,  a non-empty string, or a non-null array.
      It is considered FALSE otherwise, i.e. its expression: 
          evaluates to an invalid expression or is 0 or (,0) or '' or has a 0 in its shape.

    ::IF expression
      Includes lines within the ::IF block if the expression given evaluates at ∆FIX time to TRUE.
      Lines may include ::INCLUDE, embedded ::IF ... ::ENDIF expressions, and other double-colon directives,
      as well as any APL statements appropriate to the context.

    ::ELSEIF expression
      Like ::IF

    ::ELSE
      Executes lines within the ::ELSE block if prior ::IF or ::ELSEIF expressions were false.

    ::END[IF]
      Terminates the matching ::IF block.

  6.  Predefined Macros (See ::DEF and ::DEFL)
      ⎕F        APLified Python-reminiscent format function
                  Cap←{ '\b(\w)' ⎕R '\u1'⊣⍵} ⍝ Capitalize 1st letter of each word...
                  their name city← 'her' 'Mary Smith' 'Providence'                                  
                  ⎕F '{Cap their} name is {name} and {their} address is {?150} Main St. in {city}.'   
                Her name is Mary Smith and her address is 121 Main St. in Providence.
                  ⎕F "String {⍪⍵⍵⍴⎕TS} with multiple 2-D {⍳⍵⍵} fields" 3 (2 2)  
                String 2021 with multiple 2-D  0 0  0 1  fields
                          3                    1 0  1 1        
                         30   
      ⎕TO      Returns a numeric sequence  1 ⎕TO 20 2   or 1 3 ⎕TO 20
      ⎕ASSERT  [errMsg] ⎕ASSERT assertion1 [assertion2...].  Returns shy 0 unless an assertion is true.
      ::DEF    Used in sequence ::IF ::DEF "name"
               Returns 1 if <name> is an active Macro, else 0. Valid only with ::IF or ::ELSEIF control stmts.
      ⎕MONADIC Returns 1 if governing traditional function was called monadically; else 0. I.e. (900⌶⍬)
      ⎕M       Ditto. Example: 
                  ∇ R←{res} PIstr n ; ⎕FR;⎕PP 
                    :IF ⎕M ⋄ res←0  ⋄ :ENDIF 
                    ⎕FR← res ⊃ 1287 645 ⋄ ⎕PP← res ⊃ 34 12
                    ⍕○n
                  ∇
                  PIstr 2 ⋄ 1 PIstr 2
               6.283185307179586476925286766559006
               6.28318530718
      ⎕MY      Returns a static namespace for the currently-called Tradfn or named Dfn.
               Requires accessible namespace '∆MYgrp' (library ∆MY).
      ⎕TMP     Returns name of temporary name used in "sink" constructins.
      ⎕TEMP    Same as ⎕TMP
      ::DEBUG  1 if ∆FIX was called with DEBUG=1 (⍺[1]=1) or ::DEBUG ON was set. Else 0.
      ::COMPRESS 
               1 if ∆FIX was called with COMPRESS=1 (⍺[2]=1) or ::COMPRESS ON was set. Else 0.
      ::TRADFN Fixes the tradfn created via    ::TRADFN """    or   ::TRADFN "fn_hdr          or ::TRADFN """
                                                    fn_hdr                     fn_body"            ⍝ Ignore me
                                                    fn_body                                          r←PI n
                                                """                                                 r←○n
                If leading lines passed to ::TRADFN are blank or comments, they are ignored.       """
                The first non-blank, non-comment line must contain the function header.
                Here docs may also be used:    ::TradFn ::: EndTrad \nfn_hdr \nfn_body... \n :EndTrad 
                If an error occurs, a signal is generated. Otherwise, the name of the function ⎕FXed is shyly returned...

  +---------------------------------------+
  | ::STATIic name←  value                +
  | ::DECLare name←  value                +
  +---------------------------------------+
  ⍝    name:      An APL run-time variable
  ⍝    variable:  A Dyalog code value OR a Dyalog new Array or Namespace declaration on one or more lines.
  ⍝ Simple APL declarations are allowed. 
  ⍝    ::STATIC  time←  ⎕TS    ⍝ This will be replaced by its value at ∆FIX/⎕FIX ("compile") time (exactly once).
  ⍝    ::DECLARE time←  ⎕TS    ⍝ This will execute at run-time (each time statement is reached).
  ⍝ More complex declarations may extend over multiple lines or use statment separators (⋄),
  ⍝ using double-quoted multi-line strings, complex declarations in brackets [] or parentheses [].
  ⍝    ::STATIC multiNow←    [ 'iota10'  ⋄ ⍳10   ⍝ Creates a  declaration evaluated at ∆FIX time.
  ⍝                            'revAlph' ⋄ ⌽⎕A
  ⍝                            'when'    ⋄ ⎕TS   ⍝ Set as a constant, when an object is ∆FIXed.
  ⍝                          ]
  ⍝    ::DECLARE multiLater←  [ 'iota10'  ⋄ ⍳10  ⍝ Creates a declaration to be evaluated at run-time
  ⍝                             'revAlph' ⋄ ⌽⎕A
  ⍝                             'when'    ⋄ ⎕TS  ⍝ Changes on each call, if internal to a object.
  ⍝                           ]
  ⍝     ::STATIC variables have access only to named objects created earlier in the same session.
  ⍝
  ⍝  EXAMPLE:
  ⍝  ¯¯¯¯¯¯¯¯
  ⍝>       2 ∆FIX '(TS TSS)←test' '::DECLARE TS←  ⎕TS' '::STATIC TSS←  ⎕TS'
  ⍝>       ⎕CR 'test'              ⍝ Show resulting code from ∆FIX.
  ⍝   (TS TSS)←test                     
  ⍝   ⍝↑::DECLARE TS←  ⎕TS      
  ⍝   TS←⎕TS                       ⍝ Note: Code executed at run-time on each function call.
  ⍝   ⍝↑::STATIC TSS←  ⎕TS      
  ⍝   TSS←2021 2 23 22 44 5 178    ⍝ Note: precalculated, so constant at run-time
  ⍝  
  ⍝>       test
  ⍝   2021 2 23 22 47 21 69   2021 2 23 22 47 18 465    ⍝ TS changes.  TSS is constant.
  ⍝>       test
  ⍝   2021 2 23 22 47 24 283  2021 2 23 22 47 18 465 
  ⍝>       test
  ⍝   2021 2 23 22 47 35 984  2021 2 23 22 47 18 465 
  ⍝
  ⍝ See  https://www.dyalog.com/uploads/conference/dyalog20/presentations/D09_Array_Notation_RC1.pdf

  +---------------------------------------+
  | ATOMS
  +---------------------------------------+
      Atomlist Pattern:    
         (` | ``) item, where item: word | number | "quote" | 'quote'
              `: Ensures atom list is always a vector, no matter how many atoms.
             ``: Encodes a single atom as a scalar; multiple atoms as a list. E.g. for ⎕NC ``item.
                 Each char atom will be encoded as an enclosed vector (even if an APL scalar `x).
                 Each numeric atom will be encoded as a simple scalar. 
       Uses 1: To allow objects to be defined using ::DEFs, yet presented to fns and ops as quoted strings.
                 ::IF format=='in_color'
                    ::DEF MYFUN← GetColors
                 ::ELSE
                    ::DEF MYFUN← GetBlackWhite
                 ::ENDIF 
                 ⎕FX ``MYFUN
        Uses 2: To allow enumerations or word-based classes.
                colors←`red orange yellow green
                mycolor←`red 
                :IF mycolor ∊ colors  ⍝ Is my color valid?
                ...     
       atomList →  anything
       atomList →→ anything
                 Quotes a list of 1 or more words to left of the arrow, which list will be a peer
                 item with all that is to the right.
                 A single arrow ensures even a single item to the left is encoded as a 1-elem list;
                 a double arrow treats a single item as an independent scalar.
       See also ::DECLARE and Dyalog APL namespace declarations like
               name ← (var: value ⋄ var2: value2)
       Uses 1: Allows simulation of named arguments in function calls or object members:
               ((name→"John Smith")(address→"24 Mill Ln")(zip→01426))
       is encoded as:
              (((,⊂'name')(,⍥⊂)'John Smith')((,⊂'address')(,⍥⊂)'24 Mill Ln')((,⊂'zip')(,⍥⊂)01426)) 
       whose value is:
              name   John Smith     address   24 Mill Ln     zip   1426 
       boxed as:
            ┌───────────────────┬──────────────────────┬────────────┐
            │┌──────┬──────────┐│┌─────────┬──────────┐│┌─────┬────┐│
            ││┌────┐│John Smith│││┌───────┐│24 Mill Ln│││┌───┐│1426││
            │││name││          ││││address││          ││││zip││    ││
            ││└────┘│          │││└───────┘│          │││└───┘│    ││
            │└──────┴──────────┘│└─────────┴──────────┘│└─────┴────┘│
            └───────────────────┴──────────────────────┴────────────┘    