  ∆PRE    20191003
  - Preprocesses contents of codeFileName (a 2∘⎕FIX-format file) and fixes in
    the workspace (via 2 ⎕FIX ppData, where ppData is the processed version of the contents).
  - Returns: (shyly) the list of objects created (possibly none).
  
   names ← [⍺:opts preamble1 ... preambleN] ∆PRE ⍵:(codeFileName | strings[] | ⎕NULL)
  
   ---------------------------------------------------------
    ⍺
    OPTIONS
       DEBUG    -[no]D,    VERBOSE  -[no]V    EDIT  -[no]E 
       COMMENTS -[no]C,    BLANK    -[no]B    FIX   -[no]F
       HELP     -[no]H
   Option Defaults): -noV -D -noE -C -noH
    -[no]V     __VERBOSE__, include directives and status in output code.
               Default: -V  (Also a R/W macro)
    -[no]D     __DEBUG__, add annotations to ⎕ (stdout)
               Default: -noD    (Also a R/W macro)
    -[no]E     EDIT, look at annotated preprocessed intermediate file
               Default: -noE   except as below
                        -E     if ⍵ (right argument) is ⎕NULL
    -[no]C     NOCOM, remove all comment lines and blank lines
               Default: (-C)
    -[no]B     NOBLANK, remove blank lines
               Default: (-B)
    -[no]H     HELP, show help info, ignoring ⍵ (right arg)
               Default: (-noH)
    -[no]F     FIX, i.e. do 2 ⎕FIX on the generated code (fns and namespaces)
               Default: (-F)
       With -noF,
        the right argument is assumed to be 0 or more code lines, never
        a file specification; it is used for preprocessing a sequence of code lines
        for dynamic use, e.g. in ∆PRE itself...
        If -noF is specified, the result of the preprocessing is returned.
        ⍵ may be a single char vector or a vector of (char) vectors.
  Special options:
    0*  Same as: -noF[ix] -noC[omments] -noV[erbose] -noD[ebug]
        Used internally for the ⎕EVAL macro:  (⎕EVAL string) ←==→ (⍎¨0∘∆PRE string)
        *Numeric 0.
    1*  Same as: options '', but treats ⍵ as ⊆⍵
 
  Internal macro debugging Flags  
     If CALLER.∆PRE_DEBUG is defined (CALLER: the namespace from which ∆PRE was called),
            then __DEBUG__ mode is set, even if the 'D' flag is not specified.
            unless 'Q' (quiet) mode is set explicitly.
            debugmode:  (__DEBUG__∨D)∧~Q
     If __DEBUG__ mode is set,
            internal macro "variable" __DEBUG__ is defined (DEF'd) as 1, as if:
                  ::VAL __DEBUG__ ← (__DEBUG__∨option_D)∧~option_Q   ⍝ Pseudocode...
            In addition, Verbose mode is set.
     Otherwise,
            Internal flag variable __DEBUG__ is defined as 0.
            Verbose mode then depends on the 'V' flag (default is 1).
     Use ::IF __DEBUG__ etc. to change preprocessor behavior based on debug status.
 
  ---------------------------------------------------------
   ⍺
   (1↓⍺): preamble1 ... preambleN
  ---------------------------------------------------------
     Zero or more lines of a preamble to be included at the start,
     e.g. ⍺ might include definitions to "import"
          'V' '::DEF PHASE1' '::DEF pi ← 3.13'
           ↑   ↑__preamble1   preamble2
           ↑__ option(s)
 
  ---------------------------------------------------------------------------------
   ⍵:   filename | code | ⎕NULL
    [1] ⍵:filename   The filename of the function, operator, namespace, or set of objects
    [2] ⍵:code       A vector of strings, defining one or more fns, ops or namespaces,
                     in 2∘⎕FIX-format.
    [3] ⍵:⎕NULL      Prompt for lines from the user, creating pseudo-function
                     __PROMPT__
    ∘ If ⍺ includes the -noFix option (or is 0), ⍵ is passed as a vector of strings,
      as needed, i.e. ⊆⍵ (unless ⎕NULL).
    ∘ If ⍺  is 1, ⍵ will be passed as a vector of strings, i.e. ⊆⍵.
  ---------------------------------------------------------------------------------
 
     [1] The simple name, name.ext, or full filename
     of the function or cluster of objects compatible with (2 ⎕FIX ⍵),
     whose source will be loaded from:
       [a] if ⍵ has no filetype/extension,
              ⍵.dyapp,
           or (if not found in ⍵.dyapp),
              ⍵.dyalog
       [b] else
              ⍵ by itself.
     These directories are searched:
            .  ..  followed by dirs named in env vars FSPATH and WSPATH (: separates dirs)
  -----------
  + Returns +
  -----------
  Returns (shyly) the names of the 0 or more objects fixed via (2 ⎕FIX code).
 
  ---------------------------------------------------------------------------------
  Features:
  ---------------------------------------------------------------------------------
    ∘ Implicit macros
      ∘ HEXADECIMALS: Hex number converted to decimal
              0FACX /[\d][\dA-F]*[xX]/
      ∘ BIG INTEGERS: Big integers (of any length) /¯?\d+[iI]/ are converted to
              quoted numeric strings for use with Big Integer routines.
              04441433566767657I →  '04441433566767657'
        Big Integers may have non-negative exponents, but no decimals.
        The exponents simply add trailing zeros. E.g. 123 with 100 trailing zeros:
             123E100I  ==>   12300000[etc.]00000
      ∘ PROGRESSIONS: num1 [num2] .. num3    OR   'c' 'd' .. 'e'  [where c,d,e are chars]
                                             OR   'cd' .. e
              Progressions use either the ellipsis char (…) or 2 or more dots (..).
          With Numbers
              Creates a real-number progression from num1 to num3
              with delta (num2-num1), defaulting to 1 or ¯1.
              With constants  (10 0.5 .. 15), the progression is calculated at
              preprocessor time; with variables, a DFN is inserted to calculate at run time.
              Example:  :FOR i :in 1 1.5 .. 100  ==> :FOR i :in 1 1.5 2 2.5 [etc.] 99.5 100
              Example:  :FOR i :in a b   .. 100  ==> :FOR i :in a b {progressn dfn} c
          With Characters
              Creates a progression from char1 to char3 (with gaps determined by char2-char1)
                 'a'..'h'         ==> 'abcdefgh'
                 'a' 'c' .. 'h'   ==> 'aceg'
                 'ac'..'h'        ==> 'aceg'
                 'h'..'a'         ==> 'hgfedcba'
        Note: Progressions with constants that are too large (typically 500) are
              not expanded, but calculated at run time. This saves on ⎕FIX-time storage and
              perhaps editing awkwardness.
              Example:  :FOR i :in 1..10000  ==> :FOR i :in 1 {progressn dfn}10000
              See __MAX_PROGRESSION__ below to change this behavior.
      ∘ MAPS: word1 word2 ... wordN → anything
              where word1 is
                    a name (a sequence of one or morePCRE letter or _⍙∆),
                    an APL number, or ⍬ or ();
              such that numbers are left as is, but names are quoted:
                func (name → 'John Smith', age → 25, code 1 → (2 3⍴⍳6)) ==>
                func (('name')'John Smith'),('age')25,('code' 1)(2 3⍴⍳6).
              Each word in
                 word w 123.4 ⍬ a_very_long_word → value
              is replaced as follows:
                word             →  'word'
                w                →  (,'w')
                123.4            →  (,123.4)
                ⍬ or ()          →  ⍬
                a_very_long_word → 'a_very_long_word'
              What's returned is
                (⊆'word' (,'w') (,123.4) ⍬ 'a_very_long_word')
 
         Special MAPS:
                name →→ val      =>    ('name'),val
          Note: name1 name2 →→val is the same as name1 name2 → val
      ∘ ATOM LISTS:    ` word1 word2 ... wordN  
              ∘ Creates a list (vector) of atoms (char strings or numbers)
        ATOM SPECIAL LISTS:  ``word1 word2 ... wordN 
              ∘ Like ATOM LISTS, except a single ``word1 is "demoted" to a simple string.  
                Useful in cases like ⎕CR ``myFun (possibly after macro substitution on myFun)
        ATOM LISTS are similar to MAPS, as in:
                 `red orange  02FFFEX green ==>
                 ('red' 'orange' 196606 'green')      ⍝ Hex number converted to decimal
              Each word in
                 `word w 123.4 ⍬ a_very_long_word
              is as in MAPS example above.
         EXAMPLES
          ` word1             Vector of Vectors (of length 1)
          ` word1 word2       Vector of vectors (of length 2)
          ``word1             (Simple) character vector (length is length of word1)
                              like ⊃`word1
          ``word1 word2       Vector of vectors of lengths 2, 
                              like ` word1 word2.
 
        ATOM FUNCTIONS:  ` function [function]
        Atom functions create lists of functions stored as namespaces (the function is
        at ns.fn for namespace ns). Atom functions and atom names and numbers may NOT be mixed.
             function:   {any dfns}                        {(+/⍵)÷≢⍵}
                         (name of any function)            (ave)
                         (An APL function expression)      (+/÷≢⍵)
            E.g.  fnList ← ` (+)(-)(2∘*){⍺×2×⍵}
            creates a list of four namespaces ns, whose function is at ns.fn.
            The ⎕DF of each function is its value; here:
                fnList
            +  -  2∘*  {⍺×2×⍵}
    ∘ explicit macros for text replacement
        See ::DEF, ::CDEF
    ∘ continuation lines end with .. (either the ellipsis char. or 2 or more dots),
      possibly with a preceding comment. In the output file, the lines are
      connected with the set of comments on the continuation lines on the last line
      or (if large) the following (otherwise blank) line
        vec←  1  2  3  4   5 ...   ⍝ Line 1
             ¯1 ¯2 ¯3 ¯4  ¯5 ..    ⍝ Line 2
             60 70 80 90 100       ⍝ Last line
      ==>
        vec← 1 2 3 4 5  ¯1 ¯2 ¯3 ¯4 ¯5 60 70 80 90 100
        ⍝ Line 1 ⍝ Line 2 ⍝ Last line
 
    Double-Quoted (Multi-line Capable) Strings
    ------------------------------------------
    ∘ Double quoted strings under options M (default) or S.
      These may appear on one or more lines. By default, leading blanks on
      continuation lines are ignored, allowing follow-on lines to easily line up
      under the first line. (See the DQ Raw suffix below).
      A string may be forced to M or S mode by an M or S suffix, ignoring options M or S.
      Example:
        str←"This is line 1.     strM←"This is line 1.      strS←"This is line 1.
             This is line 2.           This is line 2.            This is line 2.
             This is line 3."          This is line 3."M          This is line 3."S
    ==>
    option 'M':
        str← 'This is line 1.' 'This is line 2.' 'This is line 3.'
    option 'S':
        str← ('This is line 1.',CR,'This is line 2.',CR,'This is line 3.')
    Regardless of option 'M' vs 'S':
        strM←'This is line 1.' 'This is line 2.' 'This is line 3.'
        strS←('This is line 1.',CR,'This is line 2.',CR,'This is line 3.')
 
    ∘ Double-Quoted Raw Suffix:
      Double-quoted strings followed (w/o spaces) by the R (raw) suffix will NOT have
      leading spaces on continuation lines removed.
      Options M and S (above) are both supported.
         "This is a
          raw format
         double string."
       ==>  (option 'M')
         'This is a' '      raw format' 'double string.'
 
     Triple-double quotes.  """ ... """
       Triple-double quoted expressions may appear on one or more lines.
       They are not strings, but comments, resolving to a single comment.
           1 + """This is a triple-quote that
                  is treated as a silly comment""" 4
       ==>
           1 +  4
 
     Directives
     ----------
     ::IF, ::IFDEF, ::IFNDEF
     ::ELSEIF
     ::ELSE
     ::ENDIF
     ::DEF, ::DEFQ
     ::CDEF, ::CDEFQ
     ::EVAL, ::EVALQ
     ::TRANS
     ::UNDEF
     ::STATIC
     ::INCLUDE
     ::IMPORT
 
        (Note: currently comments are removed from preprocessor directives
         before processing.)
        ::IF      cond         If cond is an undefined name, returns false, as if ::IF 0
        ::IFDEF   name         If name is defined, returns true even if name has value 0
        ::IFNDEF  name
        ::ELSEIF  cond
        ::ELIF                 Alias for ::ELSEIF
        ::ELSE
        ::END                  ::ENDIF, ::ENDIFDEF; allows ::END followed by ANY text
        ::DEF     name ← [VAL] VAL may be an APL code sequence, including the null string
                               If parens are needed, use them.
                               If you want to ignore lines by prefixing with comments,
                               use EVAL. Comments are IGNORED on directive lines, unless quoted.
        ::DEF     name ←       Sets name to a nullstring, not its quoted value.
        ::DEF     name         Same as ::DEF name ← 'name'
        ::DEFINE  name ...     Alias for ::DEF ...
        ::DEFQ    name ...     Like ::DEF except quoted evaluated string
        ::CDEF    name ...     Like ::DEF, except executed only if name is undefined
        ::[E]VAL  name ...     Same as ::DEF, except name ← ⍎val
        ::[E]VALQ name ...     Same as ::EVAL, except result is quoted.
        ∘ Note that ::DEF creates a string of code (including comments),
                  and is "TRUE" if it is not-null.  EVAL executes the string to determine
                  its value; it is true if not 0, or an object of length 0.
        ∘ Note: Names of the form ⎕cc..cc and :cc..ccc have their case ignored (in all other
          cases, case is respected). Thus, these are the same:
            ::DEF ⎕FRED ← 1 2 3            ::DEF :WHY ← ?
            ::DEF ⎕fred ← 1 2 3            ::DEF :wHy ← ?
            ::DEF ⎕FrEd ← 1 2 3
            1 + ⎕FRED <==> 1 + ⎕fReE etc.
 
        ∘ To create a macro to "null out" code lines (have them ignored),
          you can't use ::DEF, because (visible) comments are ignored for directives.
          Instead, use ::VAL, which allows you to present the comment in quotes,
          which ::VAL will evaluate (i.e. dequote) as an actual comment sequence.
                       ::VAL PHASE1 ← '⍝ IGNORE PHASE1: '
                       PHASE1 b←do_something_with 'PHASE1'
          Treated as:  ⍝ IGNORE PHASE1: b←do_something_with 'PHASE1'
                       ::VAL PHASE2 ← ''   ⍝ Don't ignore PHASE2.
                                           ⍝ Or do ::DEF PHASE2←       ⍝ null "code" assigned
                       PHASE2 b←do_something_with 'PHASE2'
          Treated as:  b←do_something_with 'PHASE2'
 
 
        ::TRANS   code1 code2  Causes <code1> to be translated to <code2> in each
        ::TR                   line of input as it is processed.
                               codeN is either a single character OR
                                  \\   backslash
                                  \    space
                                  \dd  digits indicating unicode decimal (or dd [*])
                                  \ddX digits indicating unicode hexadecimal (or ddX [*])
                               [*] if dd or ddX is 2 or more digits.
        ::UNDEF   name         Undefines name, warning if already undefined
 
        ::STATIC  name         Defines a name stored in ⍵.⍙⍙.∆MY (⎕MY.name),
                               a namespace stored in the calling namespace,
                               where ⍵ is the fun/obj name, right argument to ∆PRE.
                               Also, defines macro:
                                 ::DEF name ← ⍵.⍙⍙.∆MY.name
                               so that any reference to the (simple) name <name> will
                               refer to the identified STATIC <name>.
                               <name> is erased if this is the first time it appears in a macro.
        ::STATIC name←val      Like ::STATIC above, but also assigns
                                 ⍵.⍙⍙.∆MY.name ← val
                               val may be a single-line dfn OR an APL expression,
                               as long as it can be evaluated in the calling namespace
                               at ∆PRE preprocessor time, with whatever side effects.
                               If
                                 ::STATIC now←⎕TS
                               then now is set at preprocessor time. This is completely
                               different from
                                 ::DEF now←⎕TS
                               which replaces 'now" with '⎕TS' wherever it is found in
                               the function code to be evaluated at RUN TIME.
 
                 Note: Typically a STATIC name may refer to prior STATIC names,
                       but not run-time names in the function, since they haven't
                       been defined yet.
                 Note: While STATIC names may remain across ∆PRE calls, a name's
                       value is erased the first time ::STATIC is executed.
                       This allows a name to change classes across ∆PRE calls, but
                       NOT within a ∆PRE sequence. E.g. this leads to an error just as in APL.
                           ::STATIC i1 ← 1 2 3 {⍺←⊢ ⋄ ⎕io←1 ⋄ ⍺⍳⍵} 2
                           ::STATIC i1 ← {⎕io←1 ⋄ ⍺⍳⍵}
                       In the first case, i1 is a value, the RESULT of a call; in the second,
                       it is a function definition.
        ::STATIC code
             Code to execute at preprocessor time for use with ::STATIC names.
             To ensure a name←val or name pattern is viewed as code, do (e.g.):
                ::STATIC ⊢some arbitrary code
                ::STATIC (some arbitrary code)
 
        ::INCLUDE [name[.ext] | "dir/file" | 'dir/file']
        ::INCL    name
        ::IMPORT  name1 name2  Set internal name1 from the value of name2 in the calling env.
        ::IMPORT  name1        The value must be used in a context that makes sense.
                               If name2 omitted, it is the same as name1.
                               big←?2 3 4⍴100
                               big2←'?2 3 4⍴100'
                               ::IMPORT big
                               ::IF 3=⍴⍴big   ⍝ Makes sense
                               ⎕←big          ⍝ Will not work!
                               ::IMPORT big2
                               ⎕←big2         ⍝ Will work
  __DEBUG__                ⍝ See __DEBUG__ above...
  __MAX_EXPAND__←5         ⍝ Maximum times to expand macros (if 0, expansion is turned off!)
                           ⍝ Set via ⎕DEF __MAX_EXPAND__ ← 100
  __MAX_PROGRESSION__←500  ⍝ Maximum expansion of constant dot sequences:  5..100 etc.
                           ⍝ Otherwise, does function call (to save space or preserve line size)
  __INCLUDE_LIMITS__←5 10  ⍝ Max times a file may be ::INCLUDEd
                           ⍝ First # is min before warning. Second is max before error.
        ----------------
        cond: Is 0 if value of expr is 0, '', or undefined! Else 1.
        ext:  For ::INCLUDE/::INCL, extensions checked first are .dyapp and .dyalog.
              Paths checked are '.', '..', then dirs in env vars FSPATH and WSPATH.
 