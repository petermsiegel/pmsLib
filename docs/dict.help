
⍝H +--------------------+
⍝H |  Dict HELP         |
⍝H +---------------------
⍝H  A fast, streamlined Ordered Dictionary (i.e. an Ordered Hash Table)
⍝H     Items are stored in the order created; the dictionary order is maintained, even when a value is changed.
⍝H     (Items may be moved by sorting or by deleting and re-entering.)
⍝H  KEYS and VALUES
⍝H     Keys may be of any type and shape. Case is always respected.
⍝H  ⍵.Default, ⍵.HasDefault
⍝H     If ⍵.HasDefault←1 (default is 0), then
⍝H     ⍵.Default will be returned as the value when missing keys are requested.
⍝H     Initially, ⍵.Default←'' but ⍵.HasDefault←0, so missing keys trigger a VALUE ERROR.
⍝H     If ⍵.HasDefault←1, then the current ⍵.Default is used.
⍝H Note: Yes, there are too many choices in dict for how to set defaults; these are so we 
⍝H       can try out alternatives before culling the herd!
⍝H
⍝H Syntax:    ⍺ ← ⎕NEW dict specs
⍝H            specs: [[ Format I | Format II | Format III | Format IV ]]
⍝H                I:   [k v | dict | ⊂default)]+
⍝H                II:  (⊂default)                    ⍝ For simple scalar, same as ⊂default
⍝H                III: n×1 Matrix:   ⍪keyVec valVec [default]
⍝H                IV:  0-length Vec: '' or ⍬
⍝H
⍝H     Format I: list of  [k v  |  dict  |  ⊂default]
⍝H           k v:      key-value pair of the form (k1 v1)
⍝H           dict:     an existing dictionary returned from ⎕NEW dict.
⍝H           default:  If a scalar value ⍵1 is detected and it's not a dictionary.
⍝H                     ⊃⍵ will be the default value returned for keys which are not in the dict.
⍝H                     E.g. to enter items or dictionaries AND a default:
⍝H                     for Default←'':     ⎕New dict ((⊂'')(key1 val1)(key2 val2)...)
⍝H                     for Default←⎕NULL:  ⎕NEW dict (⎕NULL(key1 val1)(key2 val2)...)
⍝H     Format II: Enclosed or simple scalar
⍝H         general ⍵:  Initialize empty dictionary with Default←⊃⍵
⍝H           1:            "        "       "        "  Default←1  (numeric 1)
⍝H           0:            "        "       "        "  Default←0  (numeric 0)
⍝H           ⎕NULL:        "        "       "        "  Default←⎕NULL
⍝H     Format III: Matrix of shape 2 1 or 3 1
⍝H           ⍪keys vals [default]:
⍝H                     First row is ⊂keys, 2nd row is ⊂values, third is the default (if present).
⍝H                     ⎕NEW dict (⍪keys vals)  ←-→   ⎕NEW dict (↓⍉↑keys vals)
⍝H     Format IV: 0-length Vector arg
⍝H           '' or ⍬   Initialize empty dictionary with Default←'' or Default←⍬
⍝H
⍝H  ┌────────────────────────────────────────────┐─────────────────────────────────────────────┐
⍝H  |a ← ⎕NEW dict                               │ Create empty dict, no default               │
⍝H  │a ← ⎕NEW dict (1)                           │ Create empty dict, default: 1               │
⍝H  |a ← ⎕NEW dict ('' | ⍬)                      │ Create empty dict, default '' or ⍬          │
⍝H  │a ← ⎕NEW dict (⊂default)                    │ Create empty dict, default (default)        │
⍝H  │a ← ⎕NEW dict ((k,v)(k,v))                  │ Create dict with k v pairs, no def          │
⍝H  │a ← ⎕NEW dict ⍪(k1 k2..)(v1 v2..) [default] │ Create dict with keys vals and def          │
⍝H  │a ← ⎕NEW dict (d1,d2)                       │ Create dict from dicts d1 d2                │
⍝H  │a ← ⎕NEW dict ((k,v)d1(k,v)d2)              │ Create dict from mix of k v pairs and dicts │
⍝H  └────────────────────────────────────────────┘─────────────────────────────────────────────│
⍝H
⍝H  ∆DICT -- Ordered Dictionary Helper Function
⍝H     Provides simple function (visible in ⎕PATH) for creating new dictionaries
⍝H     with optional defaults for null values.
⍝H  Syntax:   a ← {default} ∆DICT specs (same format for specs as for ⎕NEW)
⍝H  ┌─────────────────────────────────────────────┐─────────────────────────────────────────────┐
⍝H  │    a ← ∆DICT  1                             │ Create empty dict, default: 1               │
⍝H  │or  a← 1 ∆DICT ⍬                             │ Create empty dict, default: 1               │
⍝H  |    a ← ∆DICT  ('' | ⍬)                      │ Create empty dict, default '' or ⍬          │
⍝H  │    a ← ∆DICT     (⊂default)                 │ Create empty dict, default (default)        │
⍝H  │    a ← ∆DICT     ((k,v)(k,v))               │ Create dict with k v pairs, no def          │
⍝H  │    a ← default ∆DICT  ⍪(k1 k2..)(v1 v2..)   │ Create dict with keys vals and def          │
⍝H  |or  a ← ∆DICT ⍪(k1 k2..)(v1 v2..)(⊂default)  │ Create empty dict, default '' or ⍬          │
⍝H  │    a ← ∆DICT     (d1,d2)                    │ Create dict from dicts d1 d2                │
⍝H  │    a ← ∆DICT     ((k,v)d1(k,v)d2)           │ Create dict from mix of k v pairs and dicts │
⍝H  └─────────────────────────────────────────────┘─────────────────────────────────────────────│

⍝H  Ordered Dictionary Creation
⍝H   ∘ Create empty
⍝H     a ← ⎕NEW dict                              ⍝ Empty dictionary
⍝H   ∘ Create and Insert key-value pairs
⍝H     a ← ⎕NEW dict ((key1 val1)(key2 val2)...)  ⍝ With items, i.e. key-value pairs
⍝H   ∘ Create empty with default value
⍝H     a ← ⎕NEW dict (⊂default)                   ⍝ Argument passed must be scalar, which will be disclosed.
⍝H   ∘ If b is an existing dict, then:
⍝H       a ← ⎕NEW dict (b)
⍝H     copies b's values into a.
⍝H     - Attributes are NOT copied via ⎕NEW.
⍝H     - To copy all keys, values, and default: Use a←b.Copy
⍝H   ∘ Pairs and dictionaries may be assigned to a new dictionary on creation:
⍝H       c←  ⎕NEW dict (a (key1 val1) (key2 val2) b)
⍝H     Elements are assigned IN ORDER, left to right, with the last value "sticking."
⍝H     Here, c is made up of the contents of dictionary a, two key-value pairs, and b.
⍝H   ∘ To make a copy, called a, of a dictionary b, including its Defaults, use Copy:
⍝H       a ← b.Copy
⍝H
⍝H  Utility Function
⍝H   ∆DICT:  "Create a new dictionary."
⍝H           ⍺ [optional]    Default Value (none, if omitted).
⍝H           ⍵:              Dictionary entries. Follows ⎕NEW dict syntax.
⍝H   E.g. Create a new dictionary, setting the default to '', and specifying values for a list of items:
⍝H       b ← '' ∆DICT ('John' 'Jones')('Mary' 'Smith')('Fred' 'Flintstone')
⍝H   E.g. Create a new dictionary from list of Keys and Values
⍝H       c ←    ∆DICT ⍪Keys Values         ⍝ Note ⍪ to signal Import (KeyVec ValVec) approach.
⍝H   E.g. Create a new dictionary and Import Key and Value from vectors K V (not by pairs):
⍝H       a ← (∆DICT ⎕NULL).Import K V
⍝H
⍝H  ┌─────────────────────────────┐
⍝H  | a.Default←val   [*]         │
⍝H  │ w←a.Default                 │
⍝H  │ w←a.HasDefault              │
⍝H  │ a.HasDefault←b              │
⍝H  │ hasdef def←a.QueryDefault   │
⍝H  │ ————————————————            │
⍝H  │ * See ⎕NEW dict             │
⍝H  └─────────────────────────────┘
⍝H  Manage Default Values
⍝H   ∘ At initialization, unless a (dictionary-wide) default has been set,
⍝H     a VALUE ERROR results from trying to retrieve a value for a missing key.
⍝H       a←⎕NEW dict
⍝H       a[10]
⍝H     VALUE ERROR
⍝H     This even occurs when retrieving values from a mix of present and missing keys.
⍝H   ∘ The default may be set to any scalar or vector value. When you set it, HasDefault←1 for you.
⍝H     (If you then set HasDefault←0, the Default value is "hidden" until HasDefault←1 again).
⍝H     ⍺.Default←⍵
⍝H     Example:
⍝H       a←⎕NEW dict ⋄ a.Default←1 3
⍝H       a[10]
⍝H     1 3
⍝H   ∘ Check defaults
⍝H     def←⍺.Default
⍝H   ∘ Check whether a default exists
⍝H     bool←⍺.HasDefault
⍝H   ∘ Turn on the default (If turned on and Default hasn't been set, it's set to Default←'').
⍝H      ⍺.HasDefault←bool
⍝H   ∘ Query current HasDefault flag and default (⎕NULL if not set):
⍝H     hasdef def←⍺.QueryDefault
⍝H  The default may also be set in the ⎕NEW call if there is an argument of this form:
⍝H   ∘ scalar
⍝H   ∘ non-dictionary (not of nameclass 9.2, or if 9.2 doesn't have method isDict or if it does, isDict returns 0).
⍝H
⍝H  ┌────────────────────────────────────────┐
⍝H  | a[k1 k2]←v1 v2                         │
⍝H  │ v1 v2←a[k1 k2]                         │
⍝H  │ a.Vals[i1 i2]←v1 v2                    │
⍝H  │ a.Values[i1 i2]←v1 v2                  │
⍝H  │ k1 k2←a.Keys[i1 i2]                    │
⍝H  │ a.Import keys vals                     │
⍝H  │ keys vals←a.Export                     │
⍝H  │ i1 i2←a.Iota k1 k2   ⍝ a.Keys ⍳ k1 k2  │
⍝H  └────────────────────────────────────────┘
⍝H  Setting keys and values
⍝H     ⍺[k1 k2...]←v1 v2...
⍝H  Retrieving values by key
⍝H     v1 v2...←a[k1 k2...]
⍝H  Setting values by index (indices must exist)
⍝H     ⍺.Values[i1 i2...]←v1 v2...
⍝H     ⍺.Vals[i1 i2...]  ←v1 v2
⍝H  Retrieving values by index (indices must exist)
⍝H     ⍺.Values[i1 i2...]
⍝H     ⍺.Vals[i1 i2...]
⍝H  Retrieve all values
⍝H     ⍺.Values
⍝H     ⍺.Vals
⍝H  Setting Keys by Index
⍝H     **NOT ALLOWED**
⍝H  Retrieving Keys by Index
⍝H      k1 k2...←⍺.Keys[i1 i2...]
⍝H  Retrieving all Keys (in index order, by default the order entered)
⍝H      k1 k2...←⍺.Keys
⍝H  Importing keys and values en masse from vectors keys vals
⍝H      ⍺.Import keys vals
⍝H      Equivalent to: ⍺[keys]←vals   ⍝ But faster!
⍝H      Note: if a key exists, its value is updated in its original order.
⍝H  Exporting keys and values en masse as vectors keys vals
⍝H      keys vals ← ⍺.Export
⍝H      Equivalent to:  keys vals← ⍺.(Keys Vals) ⍝ But faster!
⍝H  Finding index of each key (like ⍳) (or Len if not found)
⍝H      i1 i2... ← a.Iota k1 k2
⍝H      Equiv. to a.Keys ⍳ key1 key2   ⍝ But much faster!
⍝H
⍝H  ┌────────────────────────────────────────┐
⍝H  | {b1 b2}←a.Del k1 k2                    │
⍝H  │ {b1 b2}←(ignore←0) a.Del k1 k2         │
⍝H  │ {b1 b2}←a.DelByIndex i1 i2             │
⍝H  │ {b1 b2}←(ignore←0) a.DelByIndex i1 i2  │
⍝H  │ {b1 b2}←a.DI i1 i2                     │
⍝H  │ a←a.Clear          ⍝ Returns a         │
⍝H  └────────────────────────────────────────┘
⍝H  Delete key-value pairs by key (returns the unique keys deleted)
⍝H  If left arg is 1 (default 1), missing keys are ignored and 0 is returned for each.
⍝H  If 0, missing keys generate an ERROR signal.
⍝H  Returns 1 for each key deleted; 0 otherwise.
⍝H      {b1 b2}...← [[1|0]] ⍺.Del k1 k2...
⍝H  Delete key-value pairs by index (returns the unique keys deleted)
⍝H  ∘ All indices must be valid.
⍝H      {b1 b2}...← ⍺.DelByIndex i1 i2...
⍝H      {b1 b2}...← ⍺.DI i1 i2
⍝H  ∘ Invalid indices to be ignored.
⍝H      {b1 b2}...← 1 ⍺.DelByIndex i1 i2...
⍝H      b1 b2...← 1 ⍺.DI i1 i2
⍝H
⍝H  ┌───────────────────────────────────────────┐
⍝H  | b1 b2←a.HasKeys k1 k2                     │
⍝H  │ k1v1 k2v2←a.Items                         │
⍝H  │ k1v1 k2v2←a.Pairs                         │
⍝H  │ kv_Mx←a.Table                             │
⍝H  │ nitems←a.Len(gth)                         │
⍝H  └───────────────────────────────────────────┘
⍝H  Query if a key-value pair exists, by key. Returns 1 for each pair that exists...
⍝H      b1 b2...← ⍺.HasKeys k1 k2...
⍝H  Get all key value pairs
⍝H       k1v1 k2v2...←⍺.Items
⍝H       k1v1 k2v2...←⍺.Pairs
⍝H  Get all key value pairs as a matrix
⍝H      key_value_matrix←⍺.Table
⍝H  Get # of items in a dictionary
⍝H      ⍺.Len
⍝H      ⍺.Length
⍝H
⍝H  ┌────────────────────────────────────────┐
⍝H  | k1v1 k2v2←a.Pop 2                      │
⍝H  │ a['penult' 'ult']←v1 v2   ⍝ Push       │
⍝H  │ {}a.Sort/A      ⍝ Sort up in place     │
⍝H  │ {}a.SortD       ⍝ Sort dn in place     │
⍝H  │ ix←a.GradeUp    ⍝ Return indices       │
⍝H  │ ix←a.GradeDown/GradeDn                 │
⍝H  └────────────────────────────────────────┘
⍝H  Popping the first <n> items from the Ordered Dictionary
⍝H       k1v1...knvn ← ⍺.Pop count
⍝H  Removes and returns the LAST <count> entries from the dictionary (in order of creation, not update).
⍝H  Note 0: The value is returned shyly.
⍝H  Note 1: This uses the efficient idiom for removing items from hashed vectors: item↓⍨←-count
⍝H  Note 2: to "Push" items onto the end of the dictionary, simply add them, ONLY if the key is new.
⍝H      a['2nd to last' 'last'] ← 'val1' 'val2'
⍝H      a.Pop 2
⍝H  ┌───────────┬────┐
⍝H  |2nd to last│val1│
⍝H  ├───────────┼────┤
⍝H  │last       │val2│
⍝H  └───────────┴────┘
⍝H  If keys aren't new, you can delete them first and readd, so they are added at the end.
⍝H  This guarantees that a possibly new <key> is the most recent (first Pop'd) item in dictionary.
⍝H     1 a.Del ⊂'test' ⋄ a[⊂'test']←⊂'THIS IS A TEST!'
⍝H     ⎕←a.Pop 1
⍝H  test   THIS IS A TEST!
⍝H
⍝H  Sorts items in ascending (Sort/SortA) or descending (SortD) order IN PLACE.
⍝H  Uses Dyalog total array ordering.
⍝H  Returns the dictionary itself (not a copy!). Use {} to suppress returned dictionary.
⍝H     {}⍺.Sort  or  {}⍺.SortA
⍝H     {}⍺.SortD
⍝H  Return the indices for the dictionary's keys in sorted order
⍝H     ix←a.GradeUp   (ascending)
⍝H     ix←a.GradeDown (descending)
⍝H     ix←a.GradeDn   (descending)
